;;; idris-mode-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from idris-commands.el

(register-definition-prefixes "idris-commands" '("def-region-" "idris-" "proof-region-"))


;;; Generated autoloads from idris-common-utils.el

(register-definition-prefixes "idris-common-utils" '(">=-protocol-version" "destructure-case" "idris-"))


;;; Generated autoloads from idris-core.el

(register-definition-prefixes "idris-core" '("idris-is-ident-char-p"))


;;; Generated autoloads from idris-events.el

(register-definition-prefixes "idris-events" '("idris-"))


;;; Generated autoloads from idris-highlight-input.el

(register-definition-prefixes "idris-highlight-input" '("idris-"))


;;; Generated autoloads from idris-hole-list.el

(register-definition-prefixes "idris-hole-list" '("idris-"))


;;; Generated autoloads from idris-info.el

(register-definition-prefixes "idris-info" '("idris-" "with-idris-info-buffer"))


;;; Generated autoloads from idris-ipkg-mode.el

(autoload 'idris-ipkg-mode "idris-ipkg-mode" "\
Major mode for Idris package files.
\\{idris-ipkg-mode-map}
Invokes `idris-ipkg-mode-hook'.

(fn)" t)
(register-definition-prefixes "idris-ipkg-mode" '("idris-"))


;;; Generated autoloads from idris-keys.el

(register-definition-prefixes "idris-keys" '("idris-define-"))


;;; Generated autoloads from idris-log.el

(register-definition-prefixes "idris-log" '("idris-"))


;;; Generated autoloads from idris-mode.el

(autoload 'idris-mode "idris-mode" "\
Major mode for Idris
     \\{idris-mode-map}
Invokes `idris-mode-hook'.

(fn)" t)
(push '("\\.idr$" . idris-mode) auto-mode-alist)
(push '("\\.lidr$" . idris-mode) auto-mode-alist)
(register-definition-prefixes "idris-mode" '("idris-mode-"))


;;; Generated autoloads from idris-navigate.el

(register-definition-prefixes "idris-navigate" '("empty-line-p-chars" "idris-" "toplevel-nostart-chars"))


;;; Generated autoloads from idris-prover.el

(register-definition-prefixes "idris-prover" '("idris-"))


;;; Generated autoloads from idris-repl.el

(autoload 'idris-repl "idris-repl" nil t)
(register-definition-prefixes "idris-repl" '("idris-"))


;;; Generated autoloads from idris-settings.el

(register-definition-prefixes "idris-settings" '("idris-"))


;;; Generated autoloads from idris-simple-indent.el

(autoload 'idris-simple-indent-mode "idris-simple-indent" "\
Simple Idris indentation mode that uses simple heuristic.

In this minor mode, `indent-for-tab-command' (bound to <tab> by
default) will move the cursor to the next indent point in the
previous nonblank line, whereas `idris-simple-indent-backtab'
(bound to <backtab> by default) will move the cursor the
previous indent point. An indent point is a non-whitespace
character following whitespace.

Runs `idris-simple-indent-hook' on activation.

This is a minor mode.  If called interactively, toggle the
`Idris-Simple-Indent mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `idris-simple-indent-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{idris-simple-indent-mode-map}

(fn &optional ARG)" t)
(autoload 'turn-on-idris-simple-indent "idris-simple-indent" "\
Turn on function `idris-simple-indent-mode'." t)
(register-definition-prefixes "idris-simple-indent" '("idris-simple-indent" "turn-off-idris-simple-indent"))


;;; Generated autoloads from idris-syntax.el

(register-definition-prefixes "idris-syntax" '("idris-"))


;;; Generated autoloads from idris-tree-info.el

(register-definition-prefixes "idris-tree-info" '("idris-tree-info-"))


;;; Generated autoloads from idris-warnings.el

(register-definition-prefixes "idris-warnings" '("idris-"))


;;; Generated autoloads from idris-warnings-tree.el

(register-definition-prefixes "idris-warnings-tree" '("idris-"))


;;; Generated autoloads from idris-xref.el

(register-definition-prefixes "idris-xref" '("idris-xref-"))


;;; Generated autoloads from inferior-idris.el

(register-definition-prefixes "inferior-idris" '("idris-"))

;;; End of scraped data

(provide 'idris-mode-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; idris-mode-autoloads.el ends here
