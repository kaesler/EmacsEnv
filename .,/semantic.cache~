;; Object emacs/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs/"
  :tables (list 
   (semanticdb-table ".emacs.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("message" code nil nil [90 120]) ("running-off-usb-drive" function nil nil [530 634]) ("esler-elisp-directory" variable (:default-value "~/apps/emacs/elisp") nil [636 687]) ("esler-verizon-storage-root" variable (:default-value "/ftp:kevin.a.esler@members.verizon.net:") nil [689 766]) ("esler-xemacs" variable (:default-value (string-match "XEmacs" emacs-version)) nil [820 879]) ("esler-emacs20" variable (:default-value (= emacs-major-version 20)) nil [880 929]) ("esler-emacs21" variable (:default-value (= emacs-major-version 21)) nil [930 979]) ("esler-emacs22" variable (:default-value (= emacs-major-version 22)) nil [980 1029]) ("running-as-x-client" variable (:default-value (memq window-system (quote (x x11)))) nil [1103 1161]) ("running-as-w32-client" variable (:default-value (memq window-system (quote (w32 win32 mswindows)))) nil [1162 1236]) ("running-as-terminal-client" variable (:default-value (null window-system)) nil [1237 1293]) ("running-as-xterm-client" variable (:default-value (and (not running-as-x-client) (or (equal "xterm" (getenv "TERM")) (equal "vt100" (getenv "TERM"))))) nil [1500 1711]) ("at-site-ibm" variable nil nil [1758 1782]) ("at-site-home" variable nil nil [1783 1808]) ("esler-command-output-first-line-as-string" function (:arguments ("command")) nil [1810 2320]) ("let" code nil nil [2322 3045]) ("if" code nil nil [3047 3169]) ("if" code nil nil [3170 3288]) ("esler-small-screen" variable (:default-value (< (display-pixel-width) 1600)) nil [3290 3348]) ("add-hook" code nil nil [3349 3496]) ("clearcase-viewtag" function nil nil [3554 3999]) ("setq" code nil nil [4008 4036]) ("setq" code nil nil [4037 4068]) ("setq" code nil nil [4070 4114]) ("setq" code nil nil [4116 4148]) ("setq" code nil nil [4201 4233]) ("setq-default" code nil nil [4265 4300]) ("if" code nil nil [4356 4477]) ("setq-default" code nil nil [4574 4607]) ("setq" code nil nil [4686 4712]) ("setq" code nil nil [4713 4777]) ("setq" code nil nil [4862 4902]) ("put" code nil nil [4958 4993]) ("put" code nil nil [4994 5031]) ("put" code nil nil [5032 5068]) ("setq" code nil nil [5139 5170]) ("setq" code nil nil [5171 5202]) ("if" code nil nil [5256 5309]) ("find-cygwin-root" function nil nil [5354 5673]) ("cygwin-root" variable nil nil [5675 5699]) ("cygwin-bash-location" variable nil nil [5700 5733]) ("if" code nil nil [5734 5929]) ("setq" code nil nil [5957 5992]) ("esler-ultranet-user-name" variable (:default-value "esler") nil [5994 6035]) ("esler-verizon-user-name" variable (:default-value "kevin.a.esler") nil [6036 6084]) ("cond" code nil nil [6117 6889]) ("esler-register-emacs-process" function nil nil [7000 7970]) ("esler-unregister-emacs-process" function nil nil [7972 8540]) ("esler-process-exists" function (:arguments ("pid-string")) nil [8542 8794]) ("esler-cleanup-emacs-process-registry" function nil nil [8796 9504]) ("condition-case" code nil nil [9533 9602]) ("add-hook" code nil nil [9604 9663]) ("if" code nil nil [10122 10278]) ("if" code nil nil [10279 10393]) ("directory-sub-dirs" function (:arguments ("dir")) nil [10441 10751]) ("directory-sub-nondirs" function (:arguments ("dir")) nil [10753 11072]) ("esler-insert-iso-date" function nil nil [11074 11165]) ("esler-another-line" function (:user-visible-flag t :arguments ("num-lines")) nil [11167 12140]) ("esler-set-frame-colour" function (:arguments ("colour")) nil [12169 12347]) ("time-sheet" function (:prototype-flag t :user-visible-flag t) nil [12448 12525]) ("c-format" function (:prototype-flag t :user-visible-flag t) nil [12595 12693]) ("filter-current-buffer" function (:prototype-flag t :user-visible-flag t) nil [12766 12891]) ("flame" function (:prototype-flag t :user-visible-flag t) nil [12926 12967]) ("find-emacs-tag" function (:prototype-flag t :user-visible-flag t) nil [13014 13115]) ("count-region" function (:prototype-flag t :user-visible-flag t) nil [13155 13215]) ("what-cursor-position-and-line" function (:prototype-flag t :user-visible-flag t) nil [13310 13387]) ("stringset-extract-region" function (:prototype-flag t :user-visible-flag t) nil [13481 13582]) ("uniq" function (:prototype-flag t :user-visible-flag t) nil [13631 13715]) ("non-uniq" function (:prototype-flag t :user-visible-flag t) nil [13773 13869]) ("case-oid-regexp" variable (:constant-flag t :default-value (let ((hex "[0-9a-f]")) (concat hex hex hex hex hex hex hex hex "\\." hex hex hex hex hex hex hex hex "\\." hex hex hex hex "\\." hex hex ":" hex hex ":" hex hex ":" hex hex ":" hex hex ":" hex hex))) nil [13959 14383]) ("esler-oid-at-point" function nil nil [14385 14689]) ("esler-oid-at-cursor-to-date" function nil nil [14691 15062]) ("now" function nil nil [15083 15147]) ("set-mouse-shape" function (:user-visible-flag t :arguments ("form")) nil [15203 15575]) ("find-file-at-point" function (:user-visible-flag t :arguments ("&optional" "other-frame")) nil [15624 16353]) ("extract-file-name-around-point" function nil nil [16355 17334]) ("extract-buffer-name-around-point" function nil nil [17336 17862]) ("extract-ange-ftp-file-name-around-point" function nil nil [17902 20621]) ("esler-links-repository" variable (:constant-flag t :default-value "~/links") nil [20679 20789]) ("save-link-to-current-file" function (:user-visible-flag t :arguments ("link-path")) nil [20790 21726]) ("esler-emulate-apollo-again-key" function (:user-visible-flag t) nil [21795 22028]) ("time-stamp-buffer" function (:user-visible-flag t) nil [22174 23633]) ("trim-white-space-trailing" function (:user-visible-flag t) nil [23685 23852]) ("trim-white-space-leading" function (:user-visible-flag t) nil [23854 24026]) ("trim-white-space" function (:user-visible-flag t) nil [24028 24190]) ("trim-region-leading" function (:user-visible-flag t :arguments ("begin" "end")) nil [24192 24382]) ("trim-region-trailing" function (:user-visible-flag t :arguments ("begin" "end")) nil [24384 24577]) ("trim-region" function (:user-visible-flag t :arguments ("begin" "end")) nil [24579 24766]) ("esler-window-config-stack" variable nil nil [24838 24876]) ("push-window-config" function nil nil [24878 25030]) ("pop-window-config" function nil nil [25032 25336]) ("esler-sort-du-output" function (:user-visible-flag t) nil [25412 26066]) ("setq" code nil nil [26135 26186]) ("uptime" function nil nil [26188 26283]) ("edit-variable" package nil nil [26475 26499]) ("edit-variable" function (:user-visible-flag t :arguments ("var")) nil [26501 27553]) ("see-chars" function (:user-visible-flag t) nil [27668 28069]) ("region-width" function (:user-visible-flag t :arguments ("begin" "end")) nil [28163 28867]) ("buffer-width" function (:user-visible-flag t :arguments ("begin" "end")) nil [28869 29107]) ("current-line-length" function nil nil [29109 29207]) ("next-long-line" function (:user-visible-flag t) nil [29209 29463]) ("executing-on-my-home-node" function (:user-visible-flag t) nil [29530 29983]) ("iterate-over-lines-in-region" function (:arguments ("begin" "end" "func")) nil [30069 30856]) ("sort" include nil nil [31032 31047]) ("esler-sort-subr" function (:arguments ("reverse" "nextrecfun" "endrecfun" "&optional" "startkeyfun" "endkeyfun" "lessp-predicate")) nil [31049 34265]) ("esler-sort-lines" function (:user-visible-flag t :arguments ("reverse" "beg" "end")) nil [34300 34806]) ("mapreduce" function (:arguments ("l" "predicate")) nil [34844 35125]) ("mapreduce1" function (:arguments ("l" "predicate")) nil [35127 35207]) ("frame-rename" function (:arguments ("new-name")) nil [35237 35435]) ("extract-matches" function (:user-visible-flag t :arguments ("regexp")) nil [35518 35970]) ("esler-w32-preferred-font" variable (:default-value (if (or at-site-ibm esler-small-screen) "-*-Bitstream Vera Sans Mono-normal-r-*-*-12-90-96-96-c-*-iso8859-1" "-*-Bitstream Vera Sans Mono-normal-r-*-*-16-120-96-96-c-*-iso8859-1")) nil [36055 36335]) ("if" code nil nil [36337 36445]) ("if" code nil nil [37103 37329]) ("if" code nil nil [37331 37384]) ("setq" code nil nil [37423 37451]) ("setq" code nil nil [37452 37492]) ("setq" code nil nil [37573 37597]) ("setq" code nil nil [37598 37621]) ("if" code nil nil [37624 38820]) ("global-set-key" code nil nil [38887 38923]) ("global-set-key" code nil nil [38925 38968]) ("global-set-key" code nil nil [39072 39121]) ("global-set-key" code nil nil [39122 39170]) ("global-set-key" code nil nil [39206 39239]) ("hippie-expand" function (:prototype-flag t :user-visible-flag t) nil [39284 39358]) ("global-set-key" code nil nil [39359 39396]) ("global-set-key" code nil nil [39542 39575]) ("global-set-key" code nil nil [39612 39649]) ("global-set-key" code nil nil [39651 39702]) ("create-placemarker-window" function nil nil [39703 39832]) ("global-set-key" code nil nil [39834 39885]) ("global-set-key" code nil nil [39887 39936]) ("toggle-case-fold-search" function nil nil [39937 40181]) ("global-set-key" code nil nil [40183 40222]) ("current-line" function nil nil [40223 40522]) ("smart-recenter" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [40524 41421]) ("if" code nil nil [41423 41540]) ("global-set-key" code nil nil [41542 41597]) ("global-set-key" code nil nil [41659 41703]) ("global-set-key" code nil nil [41705 41744]) ("global-set-key" code nil nil [41842 41895]) ("esler-last-command-on-region" variable nil nil [41896 41937]) ("esler-shell-command-on-region" function (:user-visible-flag t) nil [41938 42573]) ("global-set-key" code nil nil [42575 42615]) ("global-unset-key" code nil nil [42679 42704]) ("global-set-key" code nil nil [42794 42836]) ("global-set-key" code nil nil [42837 42882]) ("global-set-key" code nil nil [42883 42924]) ("global-set-key" code nil nil [42925 42956]) ("global-set-key" code nil nil [42957 42998]) ("if" code nil nil [43000 43139]) ("scroll-up-one-line" function (:user-visible-flag t) nil [43140 43247]) ("scroll-down-one-line" function (:user-visible-flag t) nil [43249 43362]) ("global-set-key" code nil nil [43364 43417]) ("global-unset-key" code nil nil [43475 43502]) ("if" code nil nil [43568 44587]) ("mode-line-resize-dynamically" function (:user-visible-flag t) nil [44588 46049]) ("scroll-bar-resize-dynamically" function (:user-visible-flag t) nil [46051 47090]) ("if" code nil nil [47173 47360]) ("if" code nil nil [47473 47949]) ("set-default" code nil nil [48002 48495]) ("setq" code nil nil [48578 48618]) ("line-number-mode" code nil nil [48619 48639]) ("easymenu" include nil nil [48713 48732]) ("setq" code nil nil [48733 52410]) ("add-hook" code nil nil [52411 52448]) ("esler-gnus-new-frame" function nil nil [52451 52594]) ("esler-recover-inbox" function nil nil [52596 52676]) ("esler-dired-verizon-storage" function nil nil [52678 52769]) ("esler-read-ms-jdk-docs" function nil nil [52771 52911]) ("esler-read-sun-jdk-docs" function nil nil [52913 53304]) ("esler-start-unison-server" function (:user-visible-flag t :arguments ("port-number")) nil [53306 53668]) ("add-hook" code nil nil [53716 53757]) ("esler-eclipse-workspace-directory" variable (:default-value "~/apps/eclipse/workspaces") nil [53758 53890]) ("esler-make-eclipse-workspace-menu" function (:arguments ("ignored")) nil [53892 55678]) ("esler-invoke-eclipse-on-workspace" function (:arguments ("ws")) nil [55681 56419]) ("easy-menu-define" code nil nil [56422 56560]) ("add-hook" code nil nil [56608 56650]) ("esler-mirrored-files-directory" variable (:default-value "~/cpt/") nil [56651 56699]) ("esler-make-mirrored-files-menu" function (:arguments ("ignored")) nil [56701 58496]) ("easy-menu-define" code nil nil [58499 58632]) ("add-hook" code nil nil [58887 58929]) ("esler-escripts-directory" variable (:default-value "~/apps/emacs/escripts") nil [58930 59039]) ("esler-make-escripts-menu" function (:arguments ("ignored")) nil [59041 60687]) ("invoke-escript" function (:arguments ("name")) nil [60690 61020]) ("easy-menu-define" code nil nil [61023 61155]) ("define-key" code nil nil [61247 61368]) ("esler-kill-buffer-and-frame" function nil nil [61370 61474]) ("define-key" code nil nil [61563 61671]) ("esler-peel-off-selected-window" function nil nil [61673 61774]) ("esler-peel-off-window" function (:arguments ("window")) nil [61776 62091]) ("add-hook" code nil nil [62181 62287]) ("setq" code nil nil [62311 62337]) ("setq" code nil nil [62368 62413]) ("esler-directory-subdirectories" function (:arguments ("dir")) nil [62554 63176]) ("esler-directory-contains-elisp" function (:arguments ("dir")) nil [63178 63359]) ("esler-find-lisp-in-package" function (:arguments ("dir")) nil [63361 63694]) ("esler-set-loadpath-emacs20" function nil nil [63696 65936]) ("esler-set-loadpath-emacs21" function nil nil [65938 66571]) ("esler-set-loadpath-emacs22" function nil nil [66573 66641]) ("if" code nil nil [66643 66694]) ("if" code nil nil [66696 66747]) ("if" code nil nil [66749 66800]) ("face-describe" function (:arguments ("face")) nil [67007 67609]) ("if" code nil nil [67630 67685]) ("if" code nil nil [67711 68642]) ("if" code nil nil [68644 69593]) ("esler-standard-readonly-buffer-key-bindings-in-keymap" function (:arguments ("keymap")) nil [69663 70849]) ("esler-standard-readonly-buffer-key-bindings" function nil nil [70851 70999]) ("if" code nil nil [71041 71707]) ("jka-compr-ccrypt" include nil nil [71875 71902]) ("org-mode" function (:prototype-flag t :user-visible-flag t) nil [71927 71966]) ("org-diary" function (:prototype-flag t) nil [71967 72024]) ("org-agenda" function (:prototype-flag t :user-visible-flag t) nil [72025 72089]) ("org-store-link" function (:prototype-flag t :user-visible-flag t) nil [72090 72163]) ("add-to-list" code nil nil [72164 72218]) ("define-key" code nil nil [72219 72266]) ("define-key" code nil nil [72267 72310]) ("esler-default-eclipse-program" variable (:default-value (cond ((file-executable-p "c:/eclipse-3.0.1/eclipse.exe") "c:/eclipse-3.0.1/eclipse.exe") ((file-executable-p "c:/eclipse-3.0/eclipse.exe") "c:/eclipse-3.0/eclipse.exe") ((file-executable-p "c:/eclipse/eclipse.exe") "c:/eclipse/eclipse.exe"))) nil [72344 72648]) ("esler-start-eclipse" function (:user-visible-flag t :arguments ("heap-megabytes")) nil [72650 73169]) ("esler-start-eclipse-1gig" function nil nil [73171 73251]) ("esler-start-eclipse-debug" function nil nil [73253 73970]) ("project" include nil nil [74641 74659]) ("setq" code nil nil [74660 74706]) ("setq" code nil nil [74762 74806]) ("load-file" code nil nil [74821 74902]) ("eval-after-load" code nil nil [74931 75143]) ("setq" code nil nil [75166 75218]) ("mirror" include nil nil [75241 75258]) ("esler-check-mirror-filename" function nil nil [75390 75722]) ("add-hook" code nil nil [75724 75780]) ("esler-remote-mirror-dir" variable (:default-value (concat esler-verizon-storage-root "/cpt/")) nil [75782 75858]) ("esler-standard-mirroring" function nil nil [75859 76052]) ("if" code nil nil [76216 76260]) ("ibuffer" function (:prototype-flag t :user-visible-flag t) nil [76285 76319]) ("global-set-key" code nil nil [76320 76356]) ("esler-ibuffer-mode-bindings" function nil nil [76357 76511]) ("setq" code nil nil [76513 76850]) ("eval-after-load" code nil nil [76903 76961]) ("add-hook" code nil nil [76962 77021]) ("git-emacs" include nil nil [77048 77068]) ("setq" code nil nil [77138 77171]) ("load" code nil nil [77172 77190]) ("clearcase-dired-mode" function (:prototype-flag t :user-visible-flag t) nil [77191 77240]) ("pwv" function nil nil [77297 77437]) ("setenv" code nil nil [77439 77470]) ("setq" code nil nil [77472 77506]) ("mmm-auto" include nil nil [77645 77664]) ("setq" code nil nil [77665 77694]) ("mmm-add-mode-ext-class" code nil nil [77695 77756]) ("ishl" include nil nil [77811 77826]) ("ishl-mode" code nil nil [77827 77840]) ("ell-packages" function (:prototype-flag t :user-visible-flag t) nil [77861 77930]) ("esheet-mode" function (:prototype-flag t :user-visible-flag t) nil [77954 78025]) ("setq" code nil nil [78026 78103]) ("if" code nil nil [78128 78249]) ("power-macros" include nil nil [78901 78924]) ("setq" code nil nil [79054 79235]) ("setq" code nil nil [79272 79296]) ("setq" code nil nil [79298 79330]) ("add-hook" code nil nil [79332 79640]) ("setq" code nil nil [79704 79727]) ("setq" code nil nil [79728 79774]) ("esler-mail-setup-hook" function nil nil [79804 79859]) ("add-hook" code nil nil [79861 79911]) ("if" code nil nil [79935 80909]) ("setq" code nil nil [80999 81027]) ("setq" code nil nil [81028 81059]) ("eval-after-load" code nil nil [81448 81607]) ("eval-after-load" code nil nil [81679 81738]) ("my-vm" function nil nil [81767 81831]) ("esler-vm-junk-mail" function nil nil [81833 81931]) ("esler-vm-summary-update-hook-function" function nil nil [81933 82184]) ("vm-mark-all-messages-as-read" function (:user-visible-flag t) nil [82186 82723]) ("esler-print-folder" function (:user-visible-flag t :arguments ("folder-file")) nil [82883 83978]) ("esler-clear-mail-from-mode-line" function nil nil [84043 84646]) ("esler-vm-print-message-command" variable (:default-value "mpage -2 | lp") nil [84688 84811]) ("esler-vm-print-message" function (:user-visible-flag t :arguments ("command")) nil [84812 85485]) ("setq" code nil nil [85694 85742]) ("mail-extract-address-components" function (:prototype-flag t) nil [85744 85854]) ("esler-vm-save-return-address-as-alias" function (:user-visible-flag t) nil [85855 88400]) ("esler-vm-other-window" function (:user-visible-flag t) nil [88422 88523]) ("esler-vm-toggle-window-configuration" function (:user-visible-flag t) nil [88545 89263]) ("esler-vm-goto-last-message" function nil nil [89284 89410]) ("eslers-mail-archive-name" function nil nil [89475 89646]) ("vm" function (:prototype-flag t :user-visible-flag t) nil [89655 89710]) ("vm-other-frame" function (:prototype-flag t :user-visible-flag t) nil [89711 89785]) ("vm-visit-folder" function (:prototype-flag t :user-visible-flag t) nil [89786 89855]) ("vm-visit-virtual-folder" function (:prototype-flag t :user-visible-flag t) nil [89856 89927]) ("vm-mode" function (:prototype-flag t :user-visible-flag t) nil [89928 89986]) ("vm-mail" function (:prototype-flag t :user-visible-flag t) nil [89987 90045]) ("vm-submit-bug-report" function (:prototype-flag t :user-visible-flag t) nil [90046 90115]) ("vm-forward-message-and-complain" function (:prototype-flag t) nil [90137 90194]) ("setq" code nil nil [90195 90723]) ("vm-forward-message-and-complain" function (:prototype-flag t) nil [90775 90832]) ("setq" code nil nil [90833 91154]) ("setq" code nil nil [91155 91212]) ("setq" code nil nil [91213 91245]) ("if" code nil nil [91247 91334]) ("setq" code nil nil [91415 91452]) ("setq" code nil nil [91509 91562]) ("setq" code nil nil [91563 91616]) ("setq" code nil nil [91667 92020]) ("setq" code nil nil [92022 92396]) ("let" code nil nil [92398 93421]) ("esler-vm-get-local-mail" function (:user-visible-flag t) nil [93423 93575]) ("setq" code nil nil [93592 93670]) ("setq" code nil nil [93671 93739]) ("setq" code nil nil [93740 93786]) ("setq" code nil nil [93787 93824]) ("setq" code nil nil [93826 94130]) ("setq" code nil nil [94196 94562]) ("setq" code nil nil [94563 94845]) ("setq" code nil nil [94848 95223]) ("setq" code nil nil [95279 95384]) ("setq" code nil nil [95418 95445]) ("setq" code nil nil [95446 95474]) ("setq" code nil nil [95475 95503]) ("setq" code nil nil [95504 95530]) ("setq" code nil nil [95531 95564]) ("setq" code nil nil [95565 95586]) ("setq" code nil nil [95626 95732]) ("setq" code nil nil [95733 95768]) ("setq" code nil nil [95769 95819]) ("setq" code nil nil [95820 95853]) ("setq" code nil nil [95854 95898]) ("setq" code nil nil [95899 95945]) ("if" code nil nil [95946 96030]) ("setq" code nil nil [96031 96066]) ("setq" code nil nil [96068 96247]) ("setq" code nil nil [96249 96279]) ("setq" code nil nil [96280 96310]) ("setq" code nil nil [96311 96343]) ("setq" code nil nil [96344 96380]) ("setq" code nil nil [96381 96412]) ("setq" code nil nil [96413 96446]) ("setq" code nil nil [96447 96481]) ("setq" code nil nil [96482 96514]) ("setq" code nil nil [96515 96547]) ("if" code nil nil [96644 96846]) ("setq" code nil nil [96848 96880]) ("setq" code nil nil [96949 96980]) ("setq" code nil nil [97088 97117]) ("esler-vm-mode-bindings" function nil nil [97147 98977]) ("eval-after-load" code nil nil [98978 99026]) ("add-hook" code nil nil [99051 99096]) ("esler-vm-mode-hook" function nil nil [99097 99720]) ("esler-vm-kill-subject-and-move" function nil nil [99723 99861]) ("setq" code nil nil [99961 101104]) ("setq" code nil nil [101281 101362]) ("mailrc-mode" function nil nil [101363 101767]) ("setq" code nil nil [101769 101795]) ("setq" code nil nil [101826 102658]) ("vm-fontify" function nil nil [102660 102799]) ("setq" code nil nil [102842 102959]) ("if" code nil nil [102986 103085]) ("if" code nil nil [103087 104129]) ("setq" code nil nil [104712 104753]) ("setq" code nil nil [104860 104890]) ("setq" code nil nil [104892 105054]) ("setq" code nil nil [105081 105140]) ("setq" code nil nil [105197 105257]) ("setq" code nil nil [105259 105580]) ("setq" code nil nil [105601 105645]) ("setq" code nil nil [105646 105715]) ("setq" code nil nil [105809 105845]) ("if" code nil nil [105901 106025]) ("setq" code nil nil [106092 106145]) ("setq" code nil nil [106310 106425]) ("setq" code nil nil [106426 106492]) ("if" code nil nil [108162 108411]) ("esler-browse-url-mozilla" function (:arguments ("url" "&rest" "args")) nil [108413 108689]) ("if" code nil nil [108773 108932]) ("if" code nil nil [108965 109160]) ("global-set-key" code nil nil [109265 109314]) ("global-set-key" code nil nil [109315 109365]) ("global-set-key" code nil nil [109366 109416]) ("global-set-key" code nil nil [109417 109457]) ("global-set-key" code nil nil [109458 109506]) ("add-hook" code nil nil [109507 109622]) ("setq" code nil nil [109881 109910]) ("archie" function (:prototype-flag t :user-visible-flag t) nil [110812 110860]) ("setq" code nil nil [110862 110892]) ("setq" code nil nil [110894 110931]) ("webjump" function (:prototype-flag t :user-visible-flag t) nil [110955 111032]) ("global-set-key" code nil nil [111033 111069]) ("slashdot" function (:prototype-flag t :user-visible-flag t) nil [111095 111178]) ("watson" function (:prototype-flag t :user-visible-flag t) nil [111201 111252]) ("html-helper-mode" function (:prototype-flag t :user-visible-flag t) nil [111314 111374]) ("visual-basic-mode-hook" variable nil nil [111434 111469]) ("html-helper-mode-uses-visual-basic" variable nil nil [111470 111517]) ("esler-use-html-helper-mode-for-html" variable nil nil [113831 113879]) ("if" code nil nil [113881 114265]) ("esler-html-comment" function nil nil [114267 114683]) ("esler-html-script-narrow-to-script" function (:user-visible-flag t) nil [114685 115104]) ("esler-html-edit-javascript" function (:user-visible-flag t) nil [115106 115837]) ("esler-html-send-buffer-to-netscape4" function nil nil [115839 116171]) ("esler-html-send-buffer-to-netscape6" function nil nil [116173 116328]) ("esler-html-send-buffer-to-mozilla" function nil nil [116330 116481]) ("esler-html-send-buffer-to-ie5" function nil nil [116483 116643]) ("setq" code nil nil [116645 117050]) ("esler-comint-mode-bindings" function nil nil [117326 117969]) ("eval-after-load" code nil nil [117971 118027]) ("add-hook" code nil nil [118029 119075]) ("add-hook" code nil nil [119077 119156]) ("setq" code nil nil [119241 119508]) ("add-hook" code nil nil [119536 119586]) ("esler-shell-mode-hook" function nil nil [119587 120382]) ("telnet" function (:prototype-flag t :user-visible-flag t) nil [120411 120453]) ("add-hook" code nil nil [120454 120630]) ("setq" code nil nil [120818 120855]) ("cmubackground" function (:prototype-flag t :user-visible-flag t) nil [121211 121281]) ("run-winterp" function (:prototype-flag t :user-visible-flag t) nil [121316 121378]) ("esler-ielm-mode-bindings" function nil nil [121399 121530]) ("eval-after-load" code nil nil [121582 121634]) ("add-hook" code nil nil [121635 121702]) ("yasnippet-bundle" include nil nil [121774 121801]) ("scala-mode-auto" include nil nil [121823 121849]) ("groovy-mode" function (:prototype-flag t :user-visible-flag t) nil [121872 121952]) ("setq" code nil nil [121953 122038]) ("setq" code nil nil [122039 122165]) ("run-groovy" function (:prototype-flag t) nil [122167 122235]) ("inf-groovy-keys" function (:prototype-flag t) nil [122236 122327]) ("add-hook" code nil nil [122329 122425]) ("if" code nil nil [122444 122603]) ("camelCase-mode" function (:prototype-flag t :user-visible-flag t) nil [122628 122677]) ("add-hook" code nil nil [122678 122736]) ("load-library" code nil nil [122771 122796]) ("add-hook" code nil nil [122797 122835]) ("add-hook" code nil nil [122836 122876]) ("add-hook" code nil nil [122877 122924]) ("turn-on-eldoc-mode" function (:prototype-flag t :user-visible-flag t) nil [122956 123000]) ("add-hook" code nil nil [123001 123053]) ("add-hook" code nil nil [123054 123112]) ("load-library" code nil nil [123141 123175]) ("add-hook" code nil nil [123176 123231]) ("add-hook" code nil nil [123232 123285]) ("setq" code nil nil [123315 123413]) ("smalltalk-mode" function (:prototype-flag t :user-visible-flag t) nil [123414 123450]) ("python-mode" function (:prototype-flag t :user-visible-flag t) nil [123478 123540]) ("setq" code nil nil [123541 123618]) ("imenu-example--create-python-index" function (:prototype-flag t) nil [123658 123714]) ("add-hook" code nil nil [123778 123928]) ("if" code nil nil [124017 124076]) ("esler-c-style-description" variable (:constant-flag t :default-value (quote ("cc-mode" (c-electric-pound-behavior alignleft) (c-basic-offset . 4) (c-tab-always-indent . t) (c-comment-only-line-offset . 0) (c-echo-syntactic-information-p . t) (c-hanging-comment-ender-p) (c-hanging-braces-alist (substatement-open before after) (block-open after) (block-close . c-snug-do-while) (brace-list-close before after) (class-open before after) (class-close before after) (defun-open before after) (defun-close before after) (inline-open before after) (inline-close before after)) (c-offsets-alist (statement-cont c-lineup-string-cont +) (substatement-open . 0) (arglist-close . 0) (inline-open . 0) (label . -))))) nil [124127 125586]) ("atria-c-style-description" variable (:constant-flag t :default-value (quote ("cc-mode" (c-electric-pound-behavior alignleft) (c-basic-offset . 4) (c-hanging-braces-alist (block-open\. (after)) (brace-list-open after) (class-open after) (defun-open after) (substatement-open after)) (c-offsets-alist (arglist-intro . +) (arglist-cont . 0) (arglist-close . 0) (case-label . 2) (inline-open . 0) (func-decl-cont . esler-align-mfc-end-message-map) (label . esler-align-mfc-special-labels) (statement-case-intro . 2) (substatement-open . 0))))) nil [125675 126672]) ("setq" code nil nil [127153 127189]) ("mfc-c-style-description" variable (:default-value (quote ("cc-mode" (c-electric-pound-behavior alignleft) (c-basic-offset . 4) (c-hanging-braces-alist (block-open\. (after)) (brace-list-open after) (class-open after) (defun-open after) (substatement-open after)) (c-offsets-alist (statement-cont . 0) (func-decl-cont . esler-align-mfc-end-message-map) (arglist-intro . +) (arglist-cont . 0) (arglist-cont-nonempty . +) (arglist-close . 0) (label . esler-align-mfc-special-labels) (case-label . 0) (statement-case-intro . +) (substatement-open . 0))))) nil [127191 128239]) ("esler-align-mfc-end-message-map" function (:arguments ("langelem")) nil [128241 128728]) ("esler-align-mfc-special-labels" function (:arguments ("langelem")) nil [128730 129202]) ("cc-mode" include nil nil [129211 129229]) ("c-add-style" code nil nil [129230 129277]) ("c-add-style" code nil nil [129278 129325]) ("c-add-style" code nil nil [129326 129369]) ("esler-file-seems-to-be-MFC" function nil nil [129371 129500]) ("esler-c-choose-style" function nil nil [129546 129877]) ("add-hook" code nil nil [129935 129985]) ("add-hook" code nil nil [129986 130028]) ("add-hook" code nil nil [130029 130081]) ("esler-c-mode-hook" function nil nil [130155 130388]) ("esler-c-and-c++-mode-hook" function nil nil [130390 130738]) ("esler-c-mode-bindings" function nil nil [130785 131270]) ("eval-after-load" code nil nil [131271 131323]) ("add-hook" code nil nil [131325 131381]) ("esler-c-mode-common-hook" function nil nil [131382 131977]) ("if" code nil nil [132089 132710]) ("atria-java-style-description" variable (:constant-flag t :default-value (quote ("java" (c-basic-offset . 4) (c-hanging-braces-alist (block-open\. (after)) (brace-list-open after) (class-open after) (defun-open after) (substatement-open after)) (c-offsets-alist (arglist-intro . +) (arglist-cont . 0) (arglist-close . 0) (case-label . 2) (func-decl-cont . +) (inline-open . 0) (label . 2) (statement-case-intro . 2) (substatement-open . 0) (topmost-intro-cont . 0))))) nil [133001 133939]) ("c-add-style" code nil nil [133940 133995]) ("esler-java-mode-hook" function nil nil [133997 134158]) ("add-hook" code nil nil [134160 134208]) ("kae-jde-cflow-expand-inappropriate" function nil nil [134275 134646]) ("setq" code nil nil [134734 134802]) ("atria-javascript-style-description" variable (:constant-flag t :default-value (quote ("java" (c-basic-offset . 4) (c-hanging-braces-alist (block-open\. (after)) (brace-list-open after) (class-open after) (defun-open after) (substatement-open after)) (c-offsets-alist (arglist-intro . +) (arglist-cont . 0) (arglist-close . 0) (case-label . 2) (func-decl-cont . +) (inline-open . 0) (label . 2) (lambda-intro-cont . 0) (statement-case-intro . 2) (substatement-open . 0) (topmost-intro-cont . 0))))) nil [134804 135802]) ("c-add-style" code nil nil [135803 135870]) ("esler-javascript-mode-hook" function nil nil [135872 136211]) ("add-hook" code nil nil [136213 136269]) ("c-outline" function (:prototype-flag t :user-visible-flag t) nil [136307 136346]) ("add-hook" code nil nil [136418 136588]) ("define-key" code nil nil [136590 136658]) ("define-key" code nil nil [136659 136727]) ("add-hook" code nil nil [136793 136861]) ("add-hook" code nil nil [136891 137034]) ("setq" code nil nil [137067 137144]) ("tuareg-mode" function (:prototype-flag t :user-visible-flag t) nil [137145 137215]) ("tuareg-run-caml" function (:prototype-flag t :user-visible-flag t) nil [137216 137286]) ("camldebug" function (:prototype-flag t :user-visible-flag t) nil [137287 137347]) ("setq" code nil nil [137349 137388]) ("sml-mode" function (:prototype-flag t :user-visible-flag t) nil [137413 137513]) ("sml-shell" function (:prototype-flag t :user-visible-flag t) nil [137515 137613]) ("cmusml" function (:prototype-flag t :user-visible-flag t) nil [137615 137730]) ("setq" code nil nil [137732 137801]) ("eval-after-load" code nil nil [137803 137852]) ("setq" code nil nil [137853 137874]) ("add-hook" code nil nil [137934 137978]) ("setq" code nil nil [138020 138147]) ("run-scheme" function (:prototype-flag t :user-visible-flag t) nil [138276 138350]) ("esler-scheme-mode-bindings" function nil nil [138459 138630]) ("eval-after-load" code nil nil [138631 138687]) ("add-hook" code nil nil [138689 138892]) ("setq" code nil nil [138894 138931]) ("setq" code nil nil [139079 139158]) ("run-scheme" function (:prototype-flag t :user-visible-flag t) nil [139160 139234]) ("add-hook" code nil nil [139343 139504]) ("setq" code nil nil [139506 139655]) ("run-scsh" function nil nil [139656 139889]) ("put" code nil nil [139935 139975]) ("put" code nil nil [139976 140015]) ("eval-after-load" code nil nil [140178 140299]) ("define-key" code nil nil [140330 140368]) ("define-key" code nil nil [140502 140584]) ("setq" code nil nil [140586 140612]) ("imenu-example--function-name-regexp-scheme" variable (:default-value (concat "^[ 	]*(" "\\(" "define" "\\|" "defmacro" "\\|" "\\(define-[^ 	
]\\)" "\\)" "[ 	
]*\\(\\w\\|[:><\\-]\\)+")) nil [140636 140911]) ("setq" code nil nil [140913 141159]) ("ktest" function nil nil [141160 141234]) ("imenu-example--create-scheme-index" function (:arguments ("&optional" "regexp")) nil [141236 141948]) ("add-hook" code nil nil [141950 142104]) ("add-hook" code nil nil [142333 142477]) ("add-hook" code nil nil [142479 142635]) ("setq" code nil nil [142769 142848]) ("setq" code nil nil [142849 142928]) ("setq" code nil nil [142929 143013]) ("setq" code nil nil [143014 143096]) ("if" code nil nil [143098 143541]) ("setq" code nil nil [143575 143605]) ("make-buffer-file-executable-if-script-p" function nil nil [143662 144347]) ("add-hook" code nil nil [144349 144417]) ("br-directory" variable (:default-value (concat esler-elisp-directory "/OOBR/")) nil [144797 144968]) ("oo-browser" function (:prototype-flag t :user-visible-flag t) nil [144970 145063]) ("br-env-browse" function (:prototype-flag t :user-visible-flag t) nil [145064 145180]) ("gd-add-to-mode" function (:prototype-flag t :user-visible-flag t) nil [145254 145301]) ("add-hook" code nil nil [145302 145341]) ("add-hook" code nil nil [145342 145383]) ("add-hook" code nil nil [145384 145432]) ("add-hook" code nil nil [145433 145477]) ("add-hook" code nil nil [145478 145520]) ("add-hook" code nil nil [145521 145565]) ("add-hook" code nil nil [145566 145608]) ("add-hook" code nil nil [145609 145650]) ("add-hook" code nil nil [145651 145693]) ("add-hook" code nil nil [145694 145740]) ("add-hook" code nil nil [145741 145781]) ("setq" code nil nil [145783 145807]) ("id-select-and-kill-thing" function (:prototype-flag t :user-visible-flag t) nil [145833 145921]) ("id-select-and-copy-thing" function (:prototype-flag t :user-visible-flag t) nil [145922 146011]) ("id-select-double-click-hook" function (:prototype-flag t) nil [146012 146119]) ("id-select-thing" function (:prototype-flag t :user-visible-flag t) nil [146120 146210]) ("id-select-thing-with-mouse" function (:prototype-flag t :user-visible-flag t) nil [146211 146315]) ("igrep" function (:prototype-flag t :user-visible-flag t) nil [148033 148118]) ("egrep" function (:prototype-flag t :user-visible-flag t) nil [148119 148176]) ("fgrep" function (:prototype-flag t :user-visible-flag t) nil [148177 148234]) ("igrep-recursively" function (:prototype-flag t :user-visible-flag t) nil [148235 148315]) ("egrep-recursively" function (:prototype-flag t :user-visible-flag t) nil [148316 148397]) ("fgrep-recursively" function (:prototype-flag t :user-visible-flag t) nil [148398 148479]) ("if" code nil nil [149526 150313]) ("msb" function (:prototype-flag t :user-visible-flag t) nil [150366 150417]) ("mouse-select-buffer" function (:prototype-flag t) nil [150418 150502]) ("substitute-key-definition" code nil nil [150503 150575]) ("msb" include nil nil [150577 150591]) ("setq" code nil nil [150592 150628]) ("load" code nil nil [150772 150788]) ("esler-visiting-a-Makefile-p" function nil nil [151386 151814]) ("newline-and-indent-if-not-bol" function (:user-visible-flag t) nil [151816 152025]) ("add-hook" code nil nil [152027 153590]) ("esler-mark-indented-paragraph" function nil nil [153592 153759]) ("esler-fill-indented-paragraph" function (:arguments ("justify-flag")) nil [153761 154465]) ("esler-locate-indented-paragraph" function nil nil [154467 155569]) ("eval-after-load" code nil nil [155613 155663]) ("setq" code nil nil [155782 155863]) ("setq" code nil nil [155865 155891]) ("eval-after-load" code nil nil [155931 155983]) ("setq" code nil nil [156028 156063]) ("setq" code nil nil [156064 156098]) ("setq" code nil nil [156135 156170]) ("setq" code nil nil [156219 156702]) ("esler-dired-mode-bindings" function nil nil [156704 159380]) ("eval-after-load" code nil nil [159381 159435]) ("add-hook" code nil nil [159437 159664]) ("if" code nil nil [159766 163331]) ("esler-dired-visit-vm-folder" function (:user-visible-flag t) nil [164600 164773]) ("if" code nil nil [164775 164894]) ("esler-dired-edit-linktext" function (:user-visible-flag t) nil [164895 165838]) ("esler-dired-kill-current-and-find-superior-dired" function nil nil [165840 166373]) ("esler-dired-find-alternate-buffer" function nil nil [166375 167067]) ("esler-dired-find-dired-buffer" function (:arguments ("path")) nil [167069 167645]) ("esler-dired-find-superior-buffer" function nil nil [167647 168100]) ("esler-dired-up" function (:user-visible-flag t) nil [168102 168983]) ("esler-dired-visit-tags-table" function (:user-visible-flag t) nil [168985 169215]) ("esler-dired-last-piped-command" variable nil nil [169217 169260]) ("esler-dired-pipe-file" function (:user-visible-flag t) nil [169261 170288]) ("esler-dired-spawn-shell" function (:user-visible-flag t) nil [170290 172381]) ("esler-dired-follow-link" function (:user-visible-flag t) nil [172383 172780]) ("esler-dired-down" function (:user-visible-flag t) nil [172782 173692]) ("esler-dired-keep-matching-filenames" function (:user-visible-flag t :arguments ("regexp")) nil [173694 174624]) ("esler-dired-hide-matching-filenames" function (:user-visible-flag t :arguments ("regexp")) nil [174626 175536]) ("esler-dired-revert-buffer" function (:user-visible-flag t) nil [175538 175713]) ("ps-mode" function (:prototype-flag t :user-visible-flag t) nil [175743 175821]) ("if" code nil nil [175823 175984]) ("if" code nil nil [175986 176148]) ("if" code nil nil [176150 176315]) ("ps" function nil nil [176317 176381]) ("esler-ps-mode-bindings" function nil nil [176383 176957]) ("add-hook" code nil nil [176958 177273]) ("setq" code nil nil [177821 177858]) ("display-time" code nil nil [177859 177873]) ("add-hook" code nil nil [177874 177912]) ("define-key" code nil nil [178088 178247]) ("eval-after-load" code nil nil [178303 178582]) ("info" include nil nil [179606 179621]) ("setq" code nil nil [179622 179669]) ("if" code nil nil [179671 179854]) ("if" code nil nil [179855 180040]) ("tar-mode" function (:prototype-flag t :user-visible-flag t) nil [180453 180569]) ("setq" code nil nil [180571 180640]) ("esler-tar-mode-bindings" function nil nil [180642 181348]) ("eval-after-load" code nil nil [181349 181404]) ("esler-archive-mode-bindings" function nil nil [181433 181985]) ("eval-after-load" code nil nil [181987 182046]) ("emerge-files" function (:prototype-flag t :user-visible-flag t) nil [182129 182195]) ("emerge-files-with-ancestor" function (:prototype-flag t :user-visible-flag t) nil [182196 182313]) ("emerge-buffers" function (:prototype-flag t :user-visible-flag t) nil [182314 182384]) ("emerge-buffers-with-ancestor" function (:prototype-flag t :user-visible-flag t) nil [182385 182508]) ("emerge-files-command" function (:prototype-flag t) nil [182509 182550]) ("emerge-files-with-ancestor-command" function (:prototype-flag t) nil [182551 182606]) ("emerge-files-remote" function (:prototype-flag t) nil [182607 182647]) ("emerge-files-with-ancestor-remote" function (:prototype-flag t) nil [182648 182702]) ("setq" code nil nil [182764 182825]) ("setq" code nil nil [183366 183472]) ("if" code nil nil [183544 183626]) ("esler-Man-mode-bindings" function nil nil [183688 183831]) ("add-hook" code nil nil [183833 183907]) ("esler-Man-page-mouse-3-handler" function (:user-visible-flag t :arguments ("click")) nil [183909 184441]) ("view-mode" function (:prototype-flag t :user-visible-flag t) nil [184473 184507]) ("setq" code nil nil [184508 184531]) ("esler-view-exit-action" function (:arguments ("buf")) nil [184532 184630]) ("setq" code nil nil [184631 184678]) ("setq" code nil nil [184679 184722]) ("esler-view-mode-hook" function nil nil [184723 184826]) ("load" code nil nil [184862 184898]) ("folding-mode-add-find-file-hook" code nil nil [184899 184932]) ("folding-add-to-marks-list" code nil nil [184934 184996]) ("folding-add-to-marks-list" code nil nil [184997 185053]) ("if" code nil nil [185054 185156]) ("folding-add-to-marks-list" code nil nil [185157 185220]) ("folding-add-to-marks-list" code nil nil [185221 185283]) ("folding-add-to-marks-list" code nil nil [185284 185343]) ("folding-add-to-marks-list" code nil nil [185344 185404]) ("folding-add-to-marks-list" code nil nil [185405 185464]) ("folding-add-to-marks-list" code nil nil [185465 185524]) ("folding-add-to-marks-list" code nil nil [185525 185585]) ("setq" code nil nil [185587 185813]) ("esler-folding-enfold-indented-buffer" function (:user-visible-flag t) nil [185815 188410]) ("insert-folding-cruft-at-eof" function nil nil [188412 188659]) ("eval-after-load" code nil nil [188711 188758]) ("define-key" code nil nil [188760 188849]) ("define-key" code nil nil [188850 188941]) ("add-hook" code nil nil [188943 189315]) ("esler-mouse19-folding-outline-mouse-3-handler" function (:user-visible-flag t :arguments ("click")) nil [189317 190474]) ("esler-occur-mode-bindings" function nil nil [190501 190820]) ("add-hook" code nil nil [190822 190900]) ("esler-compilation-mode-bindings" function nil nil [191054 191375]) ("add-hook" code nil nil [191376 191466]) ("context" function nil nil [191775 191884]) ("bookmark" include nil nil [191920 191939]) ("setq" code nil nil [191940 191995]) ("ehelp" include nil nil [192081 192097]) ("global-set-key" code nil nil [192098 192137]) ("lisp-dir-apropos" function (:prototype-flag t :user-visible-flag t) nil [192171 192286]) ("setq" code nil nil [192288 192403]) ("setq" code nil nil [192479 192533]) ("setq" code nil nil [192565 192600]) ("setq" code nil nil [192602 192752]) ("if" code nil nil [192793 193034]) ("time-stamp" function (:prototype-flag t :user-visible-flag t) nil [193074 193148]) ("add-hook" code nil nil [193149 193189]) ("scroll-in-place" include nil nil [193221 193247]) ("setq" code nil nil [193248 193290]) ("follow-mode" function (:prototype-flag t :user-visible-flag t) nil [193318 193413]) ("global-set-key" code nil nil [193414 193448]) ("follow-delete-other-windows-and-split" function (:prototype-flag t :user-visible-flag t) nil [193450 193583]) ("global-set-key" code nil nil [193584 193644]) ("gid" include nil nil [197265 197279]) ("easymenu" include nil nil [197456 197475]) ("bibl-visit-bibliography" function (:prototype-flag t :user-visible-flag t) nil [197477 197558]) ("bibl-mode" function (:prototype-flag t :user-visible-flag t) nil [197559 197624]) ("setq" code nil nil [197625 197674]) ("global-set-key" code nil nil [197675 197716]) ("setq" code nil nil [197744 197819]) ("paren" include nil nil [197968 197984]) ("if" code nil nil [198067 198468]) ("if" code nil nil [198532 199911]) ("if" code nil nil [199959 201974]) ("if" code nil nil [202045 202788]) ("if" code nil nil [202865 203032]) ("bash-toggle-slashes" function (:user-visible-flag t) nil [203095 203863]) ("change-character-in-buffer" function (:arguments ("from" "to")) nil [203865 204029]) ("defalias" code nil nil [204031 204073]) ("/\\-buffer" function (:user-visible-flag t) nil [204075 204188]) ("/\\-region" function (:user-visible-flag t :arguments ("start" "end")) nil [204190 204339]) ("defalias" code nil nil [204341 204368]) ("\\/-buffer" function (:user-visible-flag t) nil [204370 204483]) ("\\/-region" function (:user-visible-flag t :arguments ("start" "end")) nil [204485 204635]) ("/.-region" function (:user-visible-flag t :arguments ("start" "end")) nil [204637 204784]) ("./-region" function (:user-visible-flag t :arguments ("start" "end")) nil [204786 204934]) ("defalias" code nil nil [204936 204963]) ("defalias" code nil nil [204964 204991]) ("defalias" code nil nil [204992 205017]) ("^m" function (:user-visible-flag t) nil [205019 205123]) ("defalias" code nil nil [205125 205143]) ("defalias" code nil nil [205144 205162]) ("^m-buffer" function (:user-visible-flag t) nil [205164 205275]) ("defalias" code nil nil [205277 205302]) ("defalias" code nil nil [205303 205328]) ("^m-region" function (:user-visible-flag t :arguments ("min" "max")) nil [205330 205522]) ("if" code nil nil [205524 206359]) ("if" code nil nil [206368 210311]) ("server-start" code nil nil [210350 210364]) ("esler-project-browse-local-ccweb" function nil nil [210499 210678]) ("esler-project-dired-windows-profile" function nil nil [210680 210775]) ("esler-project-dired-unix-homedir" function nil nil [210777 210881]) ("esler-project-dired-homedir" function nil nil [210883 210952]) ("esler-current-project-notes" variable (:default-value "~/cpt/Notes.cpt") nil [210954 211008]) ("esler-edit-current-project-notes" function nil nil [211010 211111]) ("esler-edit-lore" function nil nil [211113 211186]) ("esler-edit-creds" function nil nil [211188 211263]) ("esler-project-dired-java-packages" function nil nil [211265 211360]) ("esler-project-dired-my-elisp" function nil nil [211362 211449]) ("esler-project-dired-emacs-elisp" function nil nil [211451 211554]) ("esler-project-dired-ucm-cspecs" function nil nil [211556 212061]) ("if" code nil nil [212112 212191]) ("message" code nil nil [212200 212228]))
    :file ".emacs.el"
    :pointmax 308864
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
