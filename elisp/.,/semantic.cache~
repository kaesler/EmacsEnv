;; Object elisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "elisp/"
  :tables (list 
   (semanticdb-table "project.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("timezone" include nil nil [1553 1572]) ("appt" include nil nil [1573 1588]) ("cl" include nil nil [1589 1602]) ("defgroup" code nil nil [1604 1660]) ("project-version" variable (:constant-flag t :default-value (substring "$Revision: 1.5 $" 11 -2)) nil [1662 1825]) ("project-file" variable (:user-visible-flag t :default-value "~/Projects") nil [1827 1933]) ("project-current" variable nil nil [1935 2027]) ("project-open" variable nil nil [2029 2105]) ("project-level-separator-char" variable (:user-visible-flag t :default-value 47) nil [2107 2218]) ("project-subproject-indent" variable (:user-visible-flag t :default-value 2) nil [2220 2313]) ("project-prompt-for-project" function (:arguments ("&optional" "default")) nil [2315 2765]) ("project-format-entry" function (:arguments ("project" "op")) nil [2767 2977]) ("project-insert-entry" function (:arguments ("project" "op")) nil [2979 3429]) ("project-start" function (:user-visible-flag t :arguments ("project")) nil [3431 3828]) ("project-end" function (:user-visible-flag t :arguments ("project")) nil [3831 4098]) ("project-encode-date" function (:arguments ("date")) nil [4100 4622]) ("project-summarize" function (:user-visible-flag t :arguments ("project" "start" "end")) nil [4624 5491]) ("project-summarize-today" function (:user-visible-flag t :arguments ("project")) nil [5493 5804]) ("project-summarize-this-week" function (:user-visible-flag t :arguments ("project")) nil [5806 6089]) ("project-display-summary" function (:arguments ("alist")) nil [6092 6679]) ("project-format-summary-entry" function (:arguments ("entry" "name-length")) nil [6687 7059]) ("project-sum-projects" function (:arguments ("project" "start-time" "end-time")) nil [7063 8308]) ("project-add-time-to-alist" function (:arguments ("project" "secs" "alist")) nil [8310 8958]) ("project-report" function (:user-visible-flag t :arguments ("project")) nil [8969 10945]) ("project-alist" function nil nil [10949 11654]) ("project-elapsed-interval" function (:arguments ("start" "end")) nil [11656 11906]) ("project-elapsed-time" function (:arguments ("sec")) nil [11911 12681]) ("project-parent" function (:arguments ("project")) nil [12683 13161]) ("project-subproject-name" function (:arguments ("project")) nil [13163 13530]) ("project-level" function (:arguments ("project")) nil [13532 13874]) ("project-nested-subproject-name" function (:arguments ("project")) nil [13876 14239]) ("project-compare-alist-elements" function (:arguments ("el1" "el2")) nil [14241 14364]) ("project" package nil nil [14365 14383]))
    :file "project.el"
    :pointmax 14409
    :unmatched-syntax 'nil
    )
   (semanticdb-table "worklog.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [5039 5052]) ("timezone" include nil nil [5019 5038]) ("defgroup" code nil nil [5056 5109]) ("worklog-file" variable (:default-value "~/.worklog") nil [5145 5252]) ("worklog-fill-prefix" variable (:default-value "   ") nil [5254 5366]) ("worklog-automatic-login" variable nil nil [5368 5756]) ("worklog-mode-hook" variable nil nil [5758 5847]) ("worklog-use-minutes" variable (:default-value t) nil [5849 5978]) ("worklog-summarize-show-totals" variable nil nil [5980 6112]) ("worklog-reuse-summary-buffer" variable nil nil [6114 6369]) ("worklog-summarize-tasks-hook" variable nil nil [6371 6543]) ("worklog-mode-map" variable (:default-value (let ((m (copy-keymap text-mode-map))) (define-key m "" (quote worklog-finish)) (define-key m "" (quote worklog-add-entry)) (define-key m "" (quote worklog-kill-entry)) (define-key m "" (quote worklog-kill-entry)) (define-key m "" (quote worklog-summarize-tasks)) (define-key m "	" (quote worklog-add-entry-login)) (define-key m "" (quote worklog-add-entry-logout)) (define-key m "" (quote worklog-task-begin)) (define-key m "" (quote worklog-task-stop)) (define-key m "" (quote worklog-task-done)) (define-key m "" (quote worklog-forward-entry)) (define-key m "" (quote worklog-backward-entry)) (define-key m "\356" (quote worklog-forward-entry)) (define-key m "\360" (quote worklog-backward-entry)) m)) nil [6567 7448]) ("worklog-font-lock-defaults" variable (:default-value (list (quote worklog-font-lock-keywords) nil nil nil nil)) nil [7450 7579]) ("worklog-font-lock-keywords" variable (:default-value (list "^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]")) nil [7581 7734]) ("worklog-target-column" variable (:default-value 17) nil [7736 7808]) ("worklog-task-history" variable nil nil [7810 7865]) ("worklog-logged-in" variable nil nil [7867 7950]) ("worklog" function (:user-visible-flag t) nil [7971 8112]) ("worklog-show" function (:user-visible-flag t) nil [8114 8221]) ("worklog-mode" function (:user-visible-flag t) nil [8223 8792]) ("worklog-xmas-read-char" function (:arguments ("&optional" "prompt")) nil [8998 9460]) ("if" code nil nil [9462 9586]) ("timezone-parse-date" function (:arguments ("date")) nil [9845 15274]) ("worklog-do-task" function (:arguments ("task" "&optional" "autostop")) nil [15291 16988]) ("worklog-task-begin" function (:user-visible-flag t :arguments ("task")) nil [17005 17516]) ("worklog-task-stop" function (:user-visible-flag t) nil [17533 17680]) ("worklog-task-done" function (:user-visible-flag t) nil [17697 17844]) ("worklog-summarize-tasks" function (:user-visible-flag t) nil [17861 19841]) ("worklog-finish" function (:user-visible-flag t) nil [19872 19979]) ("worklog-add-entry" function (:user-visible-flag t) nil [19981 20190]) ("worklog-add-entry-login" function (:user-visible-flag t) nil [20192 20308]) ("worklog-add-entry-logout" function (:user-visible-flag t) nil [20310 20434]) ("worklog-kill-entry" function (:user-visible-flag t :arguments ("n")) nil [20436 20628]) ("worklog-backward-entry" function (:user-visible-flag t :arguments ("n")) nil [20630 20768]) ("worklog-forward-entry" function (:user-visible-flag t :arguments ("n")) nil [20770 20979]) ("worklog-make-date-time" function (:arguments ("&optional" "time")) nil [20997 21266]) ("worklog-time-diff" function (:arguments ("a" "b")) nil [21404 21863]) ("worklog-parse-date/time" function (:arguments ("date/time")) nil [21865 22136]) ("worklog-grok-region" function (:arguments ("b" "e")) nil [22138 24389]) ("worklog-sum-to-hours-1" function (:arguments ("seconds")) nil [24434 25027]) ("worklog-sum-to-hours" function (:arguments ("seconds-list")) nil [25029 25223]) ("worklog" package nil nil [25225 25243]))
    :file "worklog.el"
    :pointmax 25271
    :unmatched-syntax '((thing 5052 . 5053) (thing 5001 . 5018) (thing 5000 . 5001))
    )
   (semanticdb-table "mirror.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("comint" include nil nil [3779 3796]) ("mirror-sftp-command" variable (:user-visible-flag t :default-value "sftp") nil [3798 3927]) ("make-variable-buffer-local" code nil nil [3928 3977]) ("mirror-password-prompt-regexp" variable (:default-value comint-password-prompt-regexp) nil [3979 4104]) ("make-variable-buffer-local" code nil nil [4182 4241]) ("mirror-login-prompt-regexp" variable (:default-value "Login:\\|Name.*:") nil [4243 4350]) ("make-variable-buffer-local" code nil nil [4351 4407]) ("mirror-prompt-regexp" variable (:default-value "^s*ftp>") nil [4409 4503]) ("make-variable-buffer-local" code nil nil [4551 4601]) ("mirror-time-to-connection" variable (:user-visible-flag t :default-value 10) nil [4603 4728]) ("make-variable-buffer-local" code nil nil [4729 4784]) ("mirror-update-command" variable (:user-visible-flag t :default-value "put") nil [4786 5001]) ("make-variable-buffer-local" code nil nil [5002 5053]) ("mirror-update-on-save" variable (:user-visible-flag t) nil [5055 5162]) ("make-variable-buffer-local" code nil nil [5163 5214]) ("mirror-file-host" variable (:user-visible-flag t) nil [5216 5384]) ("make-variable-buffer-local" code nil nil [5385 5431]) ("mirror-file-path" variable (:user-visible-flag t) nil [5433 5509]) ("make-variable-buffer-local" code nil nil [5510 5556]) ("mirror-update-this-file-maybe" function nil nil [5558 5869]) ("check-for-mirror-this-file" function nil nil [5871 6180]) ("add-hook" code nil nil [6182 6243]) ("mirror-update-this-file" function (:user-visible-flag t) nil [6245 6514]) ("mirror-initial-filter" function (:arguments ("proc" "string")) nil [6582 7623]) ("mirror-update-remote-file" function nil nil [7625 10158]) ("mirror" package nil nil [10161 10178]))
    :file "mirror.el"
    :pointmax 10340
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jka-compr-ccrypt.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("defgroup" code nil nil [6039 6111]) ("defgroup" code nil nil [6113 6201]) ("jka-compr-ccrypt-shell" variable (:user-visible-flag t :default-value "sh") nil [6204 6584]) ("jka-compr-ccrypt-shell-escape" function (:arguments ("x")) nil [6586 6939]) ("jka-compr-ccrypt-compression-info-list" variable (:default-value (quote (["\\.Z\\(~\\|\\.~[0-9]+~\\)?\\'" "compressing" ("compress" "-c") "uncompressing" ("uncompress" "-c") nil t (0) nil] ["\\.bz2\\(~\\|\\.~[0-9]+~\\)?\\'" "bzip2ing" ("bzip2") "bunzip2ing" ("bzip2" "-d") nil t (0) nil] ["\\.tgz\\'" "zipping" ("gzip" "-c" "-q") "unzipping" ("gzip" "-c" "-q" "-d") t nil (0 2) nil] ["\\.gz\\(~\\|\\.~[0-9]+~\\)?\\'" "zipping" ("gzip" "-c" "-q") "unzipping" ("gzip" "-c" "-q" "-d") t t (0 2) nil] ["\\.cpt\\(\\#\\|~\\|\\.~[0-9]+~\\)?\\'" "encrypting" ("ccrypt" "-q" "-E" "KEY") "decrypting" ("ccrypt" "-q" "-d" "-E" "KEY") nil t (0) t]))) nil [7129 10415]) ("jka-compr-ccrypt-mode-alist-additions" variable (:default-value (list (cons "\\.tgz\\'" (quote tar-mode)))) nil [10417 10585]) ("jka-compr-ccrypt-added-to-file-coding-system-alist" variable nil nil [10662 10725]) ("jka-compr-ccrypt-file-name-handler-entry" variable nil nil [10727 10869]) ("jka-compr-ccrypt-info-regexp" function (:arguments ("info")) nil [10958 11030]) ("jka-compr-ccrypt-info-compress-message" function (:arguments ("info")) nil [11031 11103]) ("jka-compr-ccrypt-info-compress-command" function (:arguments ("info")) nil [11104 11176]) ("jka-compr-ccrypt-info-uncompress-message" function (:arguments ("info")) nil [11177 11249]) ("jka-compr-ccrypt-info-uncompress-command" function (:arguments ("info")) nil [11250 11322]) ("jka-compr-ccrypt-info-can-append" function (:arguments ("info")) nil [11323 11395]) ("jka-compr-ccrypt-info-strip-extension" function (:arguments ("info")) nil [11396 11468]) ("jka-compr-ccrypt-info-retval-list" function (:arguments ("info")) nil [11469 11541]) ("jka-compr-ccrypt-info-password-flag" function (:arguments ("info")) nil [11542 11614]) ("jka-compr-ccrypt-get-compression-info" function (:arguments ("filename")) nil [11616 12144]) ("jka-compr-ccrypt-substitute" function (:arguments ("list" "key" "value")) nil [12146 12315]) ("jka-compr-ccrypt-buffer-password" variable nil nil [12317 12422]) ("make-variable-buffer-local" code nil nil [12424 12486]) ("jka-compr-ccrypt-read-passwd" function (:arguments ("&optional" "confirm" "default")) nil [12488 12627]) ("jka-compr-ccrypt-get-buffer-password" function (:arguments ("&optional" "buffer")) nil [12629 12872]) ("jka-compr-ccrypt-set-buffer-password" function (:arguments ("password" "&optional" "buffer")) nil [12874 13122]) ("ccrypt-set-buffer-password" function (:user-visible-flag t) nil [13124 13309]) ("put" code nil nil [13311 13391]) ("jka-compr-ccrypt-error" function (:arguments ("command" "infile" "message" "&optional" "errfile")) nil [13455 13994]) ("jka-compr-ccrypt-dd-program" variable (:default-value "/bin/dd") nil [13996 14044]) ("jka-compr-ccrypt-dd-blocksize" variable (:default-value 256) nil [14046 14088]) ("jka-compr-ccrypt-partial-uncompress" function (:arguments ("command" "message" "infile" "beg" "len" "retvals" "&optional" "password")) nil [14090 15521]) ("jka-compr-ccrypt-call-process2" function (:arguments ("command" "infile" "buffer" "display" "&optional" "shell")) nil [15523 16237]) ("jka-compr-ccrypt-call-process" function (:arguments ("command" "shell" "message" "infile" "output" "retvals" "&optional" "password")) nil [16239 17239]) ("jka-compr-ccrypt-temp-name-template" variable (:default-value (expand-file-name "jka-com" temporary-file-directory)) nil [17332 17609]) ("jka-compr-ccrypt-temp-name-table" variable (:default-value (make-vector 31 nil)) nil [17611 17673]) ("jka-compr-ccrypt-make-temp-name" function (:arguments ("&optional" "local-copy")) nil [17675 18530]) ("jka-compr-ccrypt-delete-temp-file" function (:arguments ("temp")) nil [18533 18720]) ("jka-compr-ccrypt-write-region" function (:arguments ("start" "end" "file" "&optional" "append" "visit")) nil [18723 22169]) ("jka-compr-ccrypt-insert-file-contents" function (:arguments ("file" "&optional" "visit" "beg" "end" "replace")) nil [22172 26288]) ("jka-compr-ccrypt-file-local-copy" function (:arguments ("file")) nil [26291 28182]) ("jka-compr-ccrypt-load" function (:arguments ("file" "&optional" "noerror" "nomessage" "nosuffix")) nil [28227 28774]) ("jka-compr-ccrypt-byte-compiler-base-file-name" function (:arguments ("file")) nil [28776 29071]) ("put" code nil nil [29074 29142]) ("put" code nil nil [29143 29227]) ("put" code nil nil [29228 29302]) ("put" code nil nil [29303 29355]) ("put" code nil nil [29356 29461]) ("jka-compr-ccrypt-inhibit" variable nil nil [29463 29684]) ("jka-compr-ccrypt-handler" function (:arguments ("operation" "&rest" "args")) nil [29686 29946]) ("jka-compr-ccrypt-run-real-handler" function (:arguments ("operation" "args")) nil [30150 30440]) ("toggle-auto-compression" function (:user-visible-flag t :arguments ("&optional" "arg" "message")) nil [31106 32030]) ("jka-compr-ccrypt-build-file-regexp" function nil nil [32032 32214]) ("jka-compr-ccrypt-install" function nil nil [32217 33877]) ("jka-compr-ccrypt-uninstall" function nil nil [33880 35435]) ("jka-compr-ccrypt-installed-p" function nil nil [35444 35851]) ("jka-compr-installed-p" function nil nil [36017 36082]) ("jka-compr" package nil nil [36083 36103]) ("jka-compr-get-compression-info" function (:arguments ("fullname")) nil [36104 36204]) ("and" code nil nil [36395 36465]) ("jka-compr-ccrypt-install" code nil nil [36467 36493]) ("jka-compr-ccrypt" package nil nil [36496 36523]))
    :file "jka-compr-ccrypt.el"
    :pointmax 36559
    :unmatched-syntax 'nil
    )
   (semanticdb-table "pabbrev.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [12237 12250]) ("thingatpt" include nil nil [12252 12272]) ("pabbrev-xemacs-p" variable (:constant-flag t :default-value (string-match "XEmacs" (emacs-version))) nil [12274 12398]) ("defgroup" code nil nil [12400 12536]) ("pabbrev-global-mode-excluded-modes" variable (:user-visible-flag t :default-value (quote (shell-mode custom-mode dired-mode telnet-mode))) nil [12538 12792]) ("pabbrev-global-mode-not-buffer-names" variable (:user-visible-flag t :default-value (quote ("*Messages*"))) nil [12794 13003]) ("pabbrev-marker-distance-before-scavenge" variable (:default-value 2000) nil [13005 13151]) ("pabbrev-expand-after-command-list" variable (:default-value (quote (self-insert-command mouse-set-point delete-char backward-delete-char-untabify))) nil [13153 13409]) ("pabbrev-scavenge-on-large-move" variable (:user-visible-flag t :default-value t) nil [13455 13806]) ("pabbrev-thing-at-point-constituent" variable (:default-value (quote symbol)) nil [13808 14413]) ("pabbrev-scavenge-some-chunk-size" variable (:default-value 40) nil [14415 14888]) ("pabbrev-idle-timer-verbose" variable (:default-value t) nil [14890 15257]) ("pabbrev-read-only-error" variable (:default-value t) nil [15259 15693]) ("if" code nil nil [15721 16620]) ("if" code nil nil [16624 16928]) ("pabbrev-usage-hash-modes" variable nil nil [16995 17086]) ("pabbrev-prefix-hash-modes" variable nil nil [17088 17181]) ("pabbrev-get-usage-hash" function nil nil [17183 17481]) ("pabbrev-get-usage-dictionary-size" function nil nil [17483 17612]) ("pabbrev-get-total-usages-dictionary" function (:user-visible-flag t) nil [17614 17871]) ("pabbrev-get-prefix-hash" function nil nil [17873 18183]) ("pabbrev-add-word-usage" function (:arguments ("word")) nil [18185 18907]) ("pabbrev-add-word-cons-with-prefix" function (:arguments ("prefix" "conscell")) nil [18912 19922]) ("pabbrev-sort-alist" function (:arguments ("alist" "cons")) nil [19924 21226]) ("pabbrev-comparitor-function" function (:arguments ("a" "b")) nil [21230 21292]) ("pabbrev-add-word" function (:arguments ("word")) nil [21297 21565]) ("pabbrev-fetch-all-suggestions-for-prefix" function (:arguments ("prefix")) nil [21567 21903]) ("pabbrev-mode-map" variable (:default-value (make-keymap)) nil [22035 22109]) ("define-key" code nil nil [22110 22166]) ("if" code nil nil [22169 23539]) ("if" code nil nil [23541 23682]) ("pabbrev-global-mode" function nil nil [23684 24338]) ("add-hook" code nil nil [24375 24427]) ("add-hook" code nil nil [24428 24482]) ("pabbrev-marker" variable nil nil [24484 24632]) ("make-variable-buffer-local" code nil nil [24633 24677]) ("pabbrev-expansion" variable nil nil [24679 24752]) ("make-variable-buffer-local" code nil nil [24753 24800]) ("pabbrev-expansion-suggestions" variable nil nil [24802 24887]) ("make-variable-buffer-local" code nil nil [24888 24947]) ("pabbrev-marker-last-expansion" variable nil nil [24949 25040]) ("make-variable-buffer-local" code nil nil [25041 25100]) ("pabbrev-mode-on" function nil nil [25102 25283]) ("pabbrev-mode-off" function nil nil [25285 25635]) ("pabbrev-post-command-hook" function nil nil [25738 27238]) ("pabbrev-delete-last-suggestion" function nil nil [27241 27665]) ("pabbrev-pre-command-hook" function nil nil [27668 28177]) ("pabbrev-command-hook-fail" function (:arguments ("err" "hook")) nil [28179 29370]) ("pabbrev-save-buffer-modified-p" function (:arguments ("&rest" "body")) nil [29374 29591]) ("pabbrev-marker-last-expansion" function nil nil [29593 29860]) ("pabbrev-update-marker" function nil nil [29862 29972]) ("pabbrev-post-command-check-movement" function nil nil [29974 30337]) ("pabbrev-overlay" variable nil nil [30339 30403]) ("make-variable-buffer-local" code nil nil [30404 30449]) ("pabbrev-set-overlay" function (:arguments ("start" "end")) nil [30451 30846]) ("pabbrev-delete-overlay" function nil nil [30848 30970]) ("pabbrev-insert-suggestion" function (:arguments ("prefix" "end" "suggestions")) nil [30972 31773]) ("pabbrev-expand-maybe" function (:user-visible-flag t) nil [31776 32517]) ("pabbrev-expand-previous-word" variable nil nil [33081 33122]) ("pabbrev-expand" function nil nil [33123 33352]) ("pabbrev-expand-commands" variable (:default-value (quote (pabbrev-expand-maybe pabbrev-expand))) nil [33355 33566]) ("pabbrev-suggestions-delete-window" function (:user-visible-flag t) nil [34617 34918]) ("pabbrev-window-configuration" variable nil nil [35456 35568]) ("pabbrev-suggestions-goto-buffer" function nil nil [35571 35976]) ("pabbrev-suggestions-from-buffer" variable nil nil [35978 36022]) ("pabbrev-suggestions-done-suggestions" variable nil nil [36023 36072]) ("pabbrev-suggestions-best-suggestion" variable nil nil [36073 36121]) ("pabbrev-suggestions-buffer" function (:arguments ("suggestions" "prefix")) nil [36123 37832]) ("pabbrev-suggestions-limit-alpha-sort" function (:arguments ("suggestions")) nil [37834 38039]) ("pabbrev-suggestions-subseq" function (:arguments ("sequence" "from" "to")) nil [38041 38585]) ("pabbrev-suggestions-setup" function nil nil [38587 39936]) ("pabbrev-noop" function (:user-visible-flag t) nil [39938 40082]) ("pabbrev-suggestions-select-default" function (:user-visible-flag t) nil [40084 40317]) ("pabbrev-suggestions-delete" function (:user-visible-flag t) nil [40319 40466]) ("pabbrev-suggestions-mimimum" function (:user-visible-flag t) nil [40468 40691]) ("pabbrev-suggestions-insert" function (:arguments ("insertion")) nil [40693 41096]) ("pabbrev-suggestions-select" function (:user-visible-flag t :arguments ("&optional" "index")) nil [41100 41490]) ("pabbrev-forward-thing" function (:user-visible-flag t :arguments ("&optional" "number")) nil [41605 41787]) ("pabbrev-thing-at-point" function nil nil [41789 41977]) ("pabbrev-bounds-of-thing-at-point" function nil nil [41979 42129]) ("pabbrev-bounds-marked-p" function (:arguments ("start" "end")) nil [42243 42520]) ("pabbrev-mark-add-word" function (:arguments ("bounds")) nil [42522 43127]) ("pabbrev-scavenge-some" function (:user-visible-flag t) nil [43129 43560]) ("pabbrev-scavenge-region" function nil nil [43562 43692]) ("pabbrev-scavenge-buffer" function nil nil [43700 44804]) ("pabbrev-scavenge-words" function (:arguments ("&optional" "direction" "number")) nil [44806 45283]) ("add-hook" code nil nil [45355 45417]) ("add-hook" code nil nil [45495 45553]) ("pabbrev-long-idle-timer" variable nil nil [45555 46228]) ("pabbrev-short-idle-timer" variable nil nil [46230 46332]) ("pabbrev-ensure-idle-timer" function nil nil [46334 46486]) ("pabbrev-start-idle-timer" function nil nil [46489 46717]) ("pabbrev-disable-timers" variable nil nil [46754 46789]) ("pabbrev-timer-buffer" variable nil nil [46977 47010]) ("pabbrev-short-idle-timer" function (:arguments ("&optional" "buffer")) nil [47012 47715]) ("pabbrev-idle-timer-function" function (:arguments ("&optional" "buffer")) nil [47717 48112]) ("pabbrev-idle-timer-function-0" function nil nil [48275 50024]) ("pabbrev-shut-up" function (:user-visible-flag t) nil [50026 50187]) ("pabbrev-debug-buffer" variable nil nil [50228 50261]) ("pabbrev-debug-enabled" variable nil nil [50296 50330]) ("pabbrev-debug-get-buffer" function nil nil [50332 50405]) ("pabbrev-debug-message" function (:arguments ("&rest" "body")) nil [50407 50691]) ("pabbrev-debug" function nil nil [50693 50789]) ("pabbrev-debug-frame" variable nil nil [50791 50823]) ("pabbrev-debug-frame" function nil nil [50824 51084]) ("pabbrev-debug-frame-scroll" function nil nil [51086 51293]) ("pabbrev-debug-display" variable nil nil [51328 51651]) ("pabbrev-debug-display" function (:arguments ("start" "end")) nil [51653 51821]) ("pabbrev-debug-display-label-face" variable (:default-value (quote ((t (:underline "navy"))))) nil [51823 51953]) ("pabbrev-debug-erase-all-overlays" function (:user-visible-flag t) nil [51956 52295]) ("pabbrev-debug-show-all-properties" function (:user-visible-flag t) nil [52297 52957]) ("pabbrev-debug-restart-idle-timer" function (:user-visible-flag t) nil [52979 53139]) ("pabbrev-debug-kill-idle-timer" function (:user-visible-flag t) nil [53141 53564]) ("pabbrev-debug-remove-properties" function (:user-visible-flag t) nil [53566 53847]) ("pabbrev-debug-clear-hashes" function (:user-visible-flag t :arguments ("&optional" "mode")) nil [53849 54443]) ("pabbrev-debug-clear-all-hashes" function (:user-visible-flag t) nil [54445 54602]) ("pabbrev-debug-print-hashes" function (:user-visible-flag t) nil [54604 55286]) ("pabbrev-debug-print-hash" function (:arguments ("hash")) nil [55288 55531]) ("condition-case" code nil nil [55630 56826]) ("pabbrev" package nil nil [56829 56847]))
    :file "pabbrev.el"
    :pointmax 56874
    :unmatched-syntax 'nil
    )
   (semanticdb-table "add-face.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("internal-change-region-face" function (:arguments ("START" "END" "face")) nil [2258 2353]) ("add-face-to-region" function (:arguments ("START" "END" "face")) nil [2355 2582]) ("remove-face-from-region" function (:arguments ("START" "END")) nil [2584 2688]) ("make-region-bold" function (:arguments ("START" "END")) nil [2690 2793]) ("make-region-underline" function (:arguments ("START" "END")) nil [2795 2908]) ("make-region-italic" function (:arguments ("START" "END")) nil [2910 3017]) ("make-region-bold-italic" function (:arguments ("START" "END")) nil [3019 3136]) ("find-text-properties" function (:arguments ("bufname")) nil [3138 3747]) ("save-text-properties" function nil nil [3749 4604]) ("write-text-properties" function nil nil [4606 4728]) ("read-text-properties" function nil nil [4730 4811]) ("add-hook" code nil nil [4813 4864]) ("add-hook" code nil nil [4865 4914]))
    :file "add-face.el"
    :pointmax 4923
    :unmatched-syntax 'nil
    )
   (semanticdb-table "yasnippet-bundle.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [1556 1569]) ("cl" include nil nil [1556 1569]) ("yas/dont-activate" variable nil nil [1725 1817]) ("make-variable-buffer-local" code nil nil [1818 1865]) ("yas/key-syntaxes" variable (:default-value (list "w" "w_" "w_." "w_.\\" "^ ")) nil [1867 2193]) ("yas/root-directory" variable nil nil [2195 2306]) ("yas/indent-line" variable (:default-value t) nil [2308 2450]) ("make-variable-buffer-local" code nil nil [2451 2496]) ("yas/trigger-key" variable (:default-value (kbd "TAB")) nil [2498 2579]) ("yas/next-field-key" variable (:default-value (kbd "TAB")) nil [2580 2658]) ("yas/keymap" variable (:default-value (make-sparse-keymap)) nil [2660 2727]) ("define-key" code nil nil [2728 2792]) ("define-key" code nil nil [2793 2852]) ("define-key" code nil nil [2853 2922]) ("define-key" code nil nil [2923 2984]) ("define-key" code nil nil [2985 3048]) ("yas/show-all-modes-in-menu" variable nil nil [3050 3615]) ("yas/use-menu" variable (:default-value t) nil [3616 3752]) ("yas/trigger-symbol" variable (:default-value " =>") nil [3753 3851]) ("yas/field-highlight-face" variable (:default-value (quote ((((class color) (background light)) (:background "DarkSeaGreen2")) (t (:background "DimGrey"))))) nil [3853 4042]) ("yas/mirror-highlight-face" variable (:default-value (quote ((((class color) (background light)) (:background "LightYellow2")) (t (:background "gray22"))))) nil [4043 4239]) ("yas/window-system-popup-function" variable (:default-value (function yas/dropdown-list-popup-for-template)) nil [4241 4503]) ("yas/text-popup-function" variable (:default-value (function yas/dropdown-list-popup-for-template)) nil [4504 4789]) ("yas/extra-mode-hooks" variable (:default-value (quote nil)) nil [4791 5044]) ("mapc" code nil nil [5045 5211]) ("yas/after-exit-snippet-hook" variable (:default-value (quote nil)) nil [5213 5483]) ("yas/before-expand-snippet-hook" variable (:default-value (quote nil)) nil [5485 5583]) ("yas/buffer-local-condition" variable (:default-value (quote (if (and (not (bobp)) (or (equal (quote font-lock-comment-face) (get-char-property (1- (point)) (quote face))) (equal (quote font-lock-string-face) (get-char-property (1- (point)) (quote face))))) (quote (require-snippet-condition . force-in-comment)) t))) nil [5585 7325]) ("make-variable-buffer-local" code nil nil [7347 7403]) ("yas/fallback-behavior" variable (:default-value (quote call-other-command)) nil [7406 7691]) ("yas/substr" function (:arguments ("str" "pattern" "&optional" "group")) nil [7857 8189]) ("yas/version" variable (:default-value "0.5.10") nil [8335 8364]) ("yas/snippet-tables" variable (:default-value (make-hash-table)) nil [8366 8480]) ("yas/menu-table" variable (:default-value (make-hash-table)) nil [8481 8577]) ("yas/menu-keymap" variable (:default-value (make-sparse-keymap "YASnippet")) nil [8578 8635]) ("define-key" code nil nil [8695 8768]) ("define-key" code nil nil [8769 8862]) ("define-key" code nil nil [8863 8955]) ("define-key" code nil nil [8956 9020]) ("yas/known-modes" variable (:default-value (quote (ruby-mode rst-mode markdown-mode))) nil [9022 9146]) ("yas/escape-backslash" variable (:constant-flag t :default-value (concat "YASESCAPE" "BACKSLASH" "PROTECTGUARD")) nil [9147 9228]) ("yas/escape-dollar" variable (:constant-flag t :default-value (concat "YASESCAPE" "DOLLAR" "PROTECTGUARD")) nil [9229 9304]) ("yas/escape-backquote" variable (:constant-flag t :default-value (concat "YASESCAPE" "BACKQUOTE" "PROTECTGUARD")) nil [9305 9386]) ("yas/field-regexp" variable (:constant-flag t :default-value (concat "$\\([0-9]+\\)" "\\|" "${\\(?:\\([0-9]+\\):\\)?\\([^}]*\\)}")) nil [9388 9497]) ("yas/snippet-id-seed" variable nil nil [9499 9569]) ("yas/snippet-next-id" function nil nil [9570 9673]) ("yas/overlay-modification-hooks" variable (:default-value (list (quote yas/overlay-modification-hook))) nil [9675 9811]) ("yas/overlay-insert-in-front-hooks" variable (:default-value (list (quote yas/overlay-insert-in-front-hook))) nil [9812 9959]) ("yas/keymap-overlay-modification-hooks" variable (:default-value (list (quote yas/overlay-maybe-insert-behind-hook))) nil [9960 10121]) ("yas/minor-mode-map" variable (:default-value (make-sparse-keymap)) nil [10269 10350]) ("yas/minor-mode-on-hook" variable nil nil [10351 10430]) ("yas/minor-mode-off-hook" variable nil nil [10431 10512]) ("define-minor-mode" code nil nil [10513 11016]) ("yas/minor-mode-auto-on" function nil nil [11019 11178]) ("yas/minor-mode-on" function (:user-visible-flag t) nil [11179 11278]) ("yas/minor-mode-off" function (:user-visible-flag t) nil [11279 11381]) ("yas/template" type (:members ("content" "name" "condition") :type "struct") nil [11526 11708]) ("yas/snippet" type (:members ("groups" "exit-marker" "id" "overlay" "saved-buffer-undo-list" "end-marker") :type "struct") nil [11709 12473]) ("yas/group" type (:members ("primary-field" "fields" "next" "prev" "snippet") :type "struct") nil [12475 12695]) ("yas/field" type (:members ("overlay" "number" "transform" "value") :type "struct") nil [12696 12859]) ("yas/snippet-table" type (:members ("hash" "parent") :type "struct") nil [12860 13040]) ("yas/snippet-valid?" function (:arguments ("snippet")) nil [13042 13270]) ("yas/snippet-add-field" function (:arguments ("snippet" "field")) nil [13272 13888]) ("yas/group-value" function (:arguments ("group")) nil [13890 14040]) ("yas/group-number" function (:arguments ("group")) nil [14041 14168]) ("yas/group-add-field" function (:arguments ("group" "field")) nil [14169 14571]) ("yas/snippet-field-compare" function (:arguments ("field1" "field2")) nil [14573 15087]) ("yas/template-condition-predicate" function (:arguments ("condition")) nil [15089 15438]) ("yas/filter-templates-by-condition" function (:arguments ("templates")) nil [15440 16432]) ("yas/snippet-table-fetch" function (:arguments ("table" "key")) nil [16434 16928]) ("yas/snippet-table-store" function (:arguments ("table" "full-key" "key" "template")) nil [16929 17280]) ("yas/ensure-minor-mode-priority" function nil nil [17426 17803]) ("yas/real-mode?" function (:arguments ("mode")) nil [17805 18188]) ("yas/eval-string" function (:arguments ("string")) nil [18190 18545]) ("yas/calculate-field-value" function (:arguments ("field" "value")) nil [18546 18862]) ("yas/replace-all" function (:arguments ("from" "to")) nil [18863 19033]) ("yas/snippet-table" function (:arguments ("mode")) nil [19035 19287]) ("yas/current-snippet-table" function nil nil [19288 19410]) ("yas/menu-keymap-for-mode" function (:arguments ("mode")) nil [19412 19662]) ("yas/current-key" function nil nil [19664 20401]) ("yas/synchronize-fields" function (:arguments ("field-group")) nil [20403 21087]) ("yas/current-field-text" function (:arguments ("field")) nil [21088 21346]) ("yas/overlay-modification-hook" function (:arguments ("overlay" "after?" "beg" "end" "&optional" "length")) nil [21349 21584]) ("yas/overlay-insert-in-front-hook" function (:arguments ("overlay" "after?" "beg" "end" "&optional" "length")) nil [21586 22166]) ("yas/overlay-maybe-insert-behind-hook" function (:arguments ("overlay" "after?" "beg" "end" "&optional" "length")) nil [22168 24089]) ("yas/remove-recent-undo-from-history" function nil nil [24091 24387]) ("yas/undo-expand-snippet" function (:arguments ("start" "key" "snippet")) nil [24389 24780]) ("yas/replace-fields-with-value" function (:arguments ("fields" "text")) nil [24782 25446]) ("yas/expand-snippet" function (:arguments ("start" "end" "template")) nil [25448 32927]) ("yas/current-snippet-overlay" function (:arguments ("&optional" "point")) nil [32929 33629]) ("yas/snippet-of-current-keymap" function (:arguments ("&optional" "point")) nil [33631 34199]) ("yas/current-overlay-for-navigation" function nil nil [34201 34885]) ("yas/navigate-group" function (:arguments ("group" "next?")) nil [34887 35300]) ("yas/parse-template" function (:arguments ("&optional" "file-name")) nil [35302 36844]) ("yas/directory-files" function (:arguments ("directory" "file?")) nil [36846 37256]) ("yas/make-menu-binding" function (:arguments ("template")) nil [37258 37476]) ("yas/modify-alist" function (:arguments ("alist" "key" "value")) nil [37478 37726]) ("yas/fake-keymap-for-popup" function (:arguments ("templates")) nil [37728 38126]) ("yas/point-to-coord" function (:arguments ("&optional" "point")) nil [38128 38566]) ("yas/x-popup-menu-for-template" function (:arguments ("templates")) nil [38568 38788]) ("yas/text-popup-for-template" function (:arguments ("templates")) nil [38789 38948]) ("yas/dropdown-list-popup-for-template" function (:arguments ("templates")) nil [38949 39665]) ("yas/popup-for-template" function (:arguments ("templates")) nil [39667 39837]) ("yas/load-directory-1" function (:arguments ("directory" "&optional" "parent")) nil [39839 40648]) ("yas/quote-string" function (:arguments ("string")) nil [40650 40951]) ("yas/compile-bundle" function (:arguments ("&optional" "yasnippet" "yasnippet-bundle" "snippet-roots" "code")) nil [40953 44523]) ("yas/about" function nil nil [44671 44835]) ("yas/reload-all" function (:user-visible-flag t) nil [44836 45172]) ("yas/load-directory" function (:user-visible-flag t :arguments ("directory")) nil [45174 45792]) ("yas/initialize" function nil nil [45794 46268]) ("yas/define-snippets" function (:arguments ("mode" "snippets" "&optional" "parent-mode")) nil [46270 49157]) ("yas/set-mode-parent" function (:arguments ("mode" "parent")) nil [49159 49523]) ("yas/define" function (:arguments ("mode" "key" "template" "&optional" "name" "condition" "group")) nil [49525 50000]) ("yas/hippie-try-expand" function (:arguments ("first-time?")) nil [50003 50480]) ("yas/expand" function (:user-visible-flag t) nil [50482 51840]) ("yas/next-field-group" function (:user-visible-flag t) nil [51842 53260]) ("yas/prev-field-group" function (:user-visible-flag t) nil [53262 54168]) ("yas/exit-snippet" function (:user-visible-flag t :arguments ("snippet")) nil [54170 54401]) ("yas/registered-snippets" variable nil nil [55383 55464]) ("make-variable-buffer-local" code nil nil [55486 55539]) ("yas/get-registered-snippets" function nil nil [55541 55711]) ("yas/register-snippet" function (:arguments ("snippet")) nil [55713 56306]) ("yas/unregister-snippet" function (:arguments ("snippet")) nil [56308 56903]) ("yas/exterminate-snippets" function (:user-visible-flag t) nil [56905 57177]) ("yas/cleanup-snippet" function (:arguments ("snippet")) nil [57179 58057]) ("yas/check-cleanup-snippet" function nil nil [58059 59162]) ("yas/field-undo-history" variable nil nil [60710 60965]) ("yas/field-undo-forbidden-commands" variable (:default-value (quote (undo aquamacs-undo redo aquamacs-redo))) nil [60967 61158]) ("yas/field-undo-before-hook" function nil nil [61160 61448]) ("yas/field-undo-after-hook" function nil nil [61450 63622]) ("yas/field-undo-group-text-change" function (:arguments ("group" "old-text")) nil [63624 64176]) ("yas/debug-some-vars" function nil nil [64241 65880]) ("yasnippet" package nil nil [65883 65903]) ("c-neutralize-syntax-in-CPP" function (:arguments ("around" "yas-mp/c-neutralize-syntax-in-CPP" "activate")) nil [66223 66546]) ("add-hook" code nil nil [66601 66833]) ("cl" include nil nil [69222 69235]) ("dropdown-list-face" variable (:user-visible-flag t :default-value (quote ((t :inherit default :background "lightyellow" :foreground "black")))) nil [69311 69443]) ("dropdown-list-selection-face" variable (:user-visible-flag t :default-value (quote ((t :inherit dropdown-list-face :background "purple")))) nil [69445 69573]) ("dropdown-list-overlays" variable nil nil [69575 69610]) ("dropdown-list-hide" function nil nil [69612 69724]) ("dropdown-list-put-overlay" function (:arguments ("beg" "end" "&optional" "prop" "value" "prop2" "value2")) nil [69726 69978]) ("dropdown-list-line" function (:arguments ("start" "replacement" "&optional" "no-insert")) nil [69980 71463]) ("dropdown-list-start-column" function (:arguments ("display-width")) nil [71465 71800]) ("dropdown-list-move-to-start-line" function (:arguments ("candidate-count")) nil [71802 72397]) ("dropdown-list-at-point" function (:arguments ("candidates" "&optional" "selidx")) nil [72399 73770]) ("dropdown-list" function (:arguments ("candidates")) nil [73772 75627]) ("define-key*" function (:arguments ("keymap" "key" "command")) nil [75629 75874]) ("combine-command" function (:arguments ("command" "defs")) nil [75876 76402]) ("command-selector-last-command" variable nil nil [76404 76476]) ("command-selector" function (:arguments ("&rest" "candidates")) nil [76478 77369]) ("dropdown-list" package nil nil [77393 77417]) ("yas/initialize-bundle" function nil nil [77678 117334]) ("yas/initialize-bundle" code nil nil [117336 117359]) ("yasnippet-bundle" package nil nil [117402 117429]))
    :file "yasnippet-bundle.el"
    :pointmax 117464
    )
   (semanticdb-table "yasnippet.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [1475 1488]) ("yas/dont-activate" variable nil nil [1644 1736]) ("make-variable-buffer-local" code nil nil [1737 1784]) ("yas/key-syntaxes" variable (:default-value (list "w" "w_" "w_." "w_.\\" "^ ")) nil [1786 2112]) ("yas/root-directory" variable nil nil [2114 2225]) ("yas/indent-line" variable (:default-value t) nil [2227 2369]) ("make-variable-buffer-local" code nil nil [2370 2415]) ("yas/trigger-key" variable (:default-value (kbd "TAB")) nil [2417 2498]) ("yas/next-field-key" variable (:default-value (kbd "TAB")) nil [2499 2577]) ("yas/keymap" variable (:default-value (make-sparse-keymap)) nil [2579 2646]) ("define-key" code nil nil [2647 2711]) ("define-key" code nil nil [2712 2771]) ("define-key" code nil nil [2772 2841]) ("define-key" code nil nil [2842 2903]) ("define-key" code nil nil [2904 2967]) ("yas/show-all-modes-in-menu" variable nil nil [2969 3534]) ("yas/use-menu" variable (:default-value t) nil [3535 3671]) ("yas/trigger-symbol" variable (:default-value " =>") nil [3672 3770]) ("yas/field-highlight-face" variable (:default-value (quote ((((class color) (background light)) (:background "DarkSeaGreen2")) (t (:background "DimGrey"))))) nil [3772 3961]) ("yas/mirror-highlight-face" variable (:default-value (quote ((((class color) (background light)) (:background "LightYellow2")) (t (:background "gray22"))))) nil [3962 4158]) ("yas/window-system-popup-function" variable (:default-value (function yas/dropdown-list-popup-for-template)) nil [4160 4422]) ("yas/text-popup-function" variable (:default-value (function yas/dropdown-list-popup-for-template)) nil [4423 4708]) ("yas/extra-mode-hooks" variable (:default-value (quote nil)) nil [4710 4963]) ("mapc" code nil nil [4964 5130]) ("yas/after-exit-snippet-hook" variable (:default-value (quote nil)) nil [5132 5402]) ("yas/before-expand-snippet-hook" variable (:default-value (quote nil)) nil [5404 5502]) ("yas/buffer-local-condition" variable (:default-value (quote (if (and (not (bobp)) (or (equal (quote font-lock-comment-face) (get-char-property (1- (point)) (quote face))) (equal (quote font-lock-string-face) (get-char-property (1- (point)) (quote face))))) (quote (require-snippet-condition . force-in-comment)) t))) nil [5504 7244]) ("make-variable-buffer-local" code nil nil [7266 7322]) ("yas/fallback-behavior" variable (:default-value (quote call-other-command)) nil [7325 7610]) ("yas/substr" function (:arguments ("str" "pattern" "&optional" "group")) nil [7776 8108]) ("yas/version" variable (:default-value "0.5.10") nil [8254 8283]) ("yas/snippet-tables" variable (:default-value (make-hash-table)) nil [8285 8399]) ("yas/menu-table" variable (:default-value (make-hash-table)) nil [8400 8496]) ("yas/menu-keymap" variable (:default-value (make-sparse-keymap "YASnippet")) nil [8497 8554]) ("define-key" code nil nil [8614 8687]) ("define-key" code nil nil [8688 8781]) ("define-key" code nil nil [8782 8874]) ("define-key" code nil nil [8875 8939]) ("yas/known-modes" variable (:default-value (quote (ruby-mode rst-mode markdown-mode))) nil [8941 9065]) ("yas/escape-backslash" variable (:constant-flag t :default-value (concat "YASESCAPE" "BACKSLASH" "PROTECTGUARD")) nil [9066 9147]) ("yas/escape-dollar" variable (:constant-flag t :default-value (concat "YASESCAPE" "DOLLAR" "PROTECTGUARD")) nil [9148 9223]) ("yas/escape-backquote" variable (:constant-flag t :default-value (concat "YASESCAPE" "BACKQUOTE" "PROTECTGUARD")) nil [9224 9305]) ("yas/field-regexp" variable (:constant-flag t :default-value (concat "$\\([0-9]+\\)" "\\|" "${\\(?:\\([0-9]+\\):\\)?\\([^}]*\\)}")) nil [9307 9416]) ("yas/snippet-id-seed" variable nil nil [9418 9488]) ("yas/snippet-next-id" function nil nil [9489 9592]) ("yas/overlay-modification-hooks" variable (:default-value (list (quote yas/overlay-modification-hook))) nil [9594 9730]) ("yas/overlay-insert-in-front-hooks" variable (:default-value (list (quote yas/overlay-insert-in-front-hook))) nil [9731 9878]) ("yas/keymap-overlay-modification-hooks" variable (:default-value (list (quote yas/overlay-maybe-insert-behind-hook))) nil [9879 10040]) ("yas/minor-mode-map" variable (:default-value (make-sparse-keymap)) nil [10188 10269]) ("yas/minor-mode-on-hook" variable nil nil [10270 10349]) ("yas/minor-mode-off-hook" variable nil nil [10350 10431]) ("define-minor-mode" code nil nil [10432 10935]) ("yas/minor-mode-auto-on" function nil nil [10938 11097]) ("yas/minor-mode-on" function (:user-visible-flag t) nil [11098 11197]) ("yas/minor-mode-off" function (:user-visible-flag t) nil [11198 11300]) ("yas/template" type (:members ("content" "name" "condition") :type "struct") nil [11445 11627]) ("yas/snippet" type (:members ("groups" "exit-marker" "id" "overlay" "saved-buffer-undo-list" "end-marker") :type "struct") nil [11628 12392]) ("yas/group" type (:members ("primary-field" "fields" "next" "prev" "snippet") :type "struct") nil [12394 12614]) ("yas/field" type (:members ("overlay" "number" "transform" "value") :type "struct") nil [12615 12778]) ("yas/snippet-table" type (:members ("hash" "parent") :type "struct") nil [12779 12959]) ("yas/snippet-valid?" function (:arguments ("snippet")) nil [12961 13189]) ("yas/snippet-add-field" function (:arguments ("snippet" "field")) nil [13191 13807]) ("yas/group-value" function (:arguments ("group")) nil [13809 13959]) ("yas/group-number" function (:arguments ("group")) nil [13960 14087]) ("yas/group-add-field" function (:arguments ("group" "field")) nil [14088 14490]) ("yas/snippet-field-compare" function (:arguments ("field1" "field2")) nil [14492 15006]) ("yas/template-condition-predicate" function (:arguments ("condition")) nil [15008 15357]) ("yas/filter-templates-by-condition" function (:arguments ("templates")) nil [15359 16351]) ("yas/snippet-table-fetch" function (:arguments ("table" "key")) nil [16353 16847]) ("yas/snippet-table-store" function (:arguments ("table" "full-key" "key" "template")) nil [16848 17199]) ("yas/ensure-minor-mode-priority" function nil nil [17345 17722]) ("yas/real-mode?" function (:arguments ("mode")) nil [17724 18107]) ("yas/eval-string" function (:arguments ("string")) nil [18109 18464]) ("yas/calculate-field-value" function (:arguments ("field" "value")) nil [18465 18781]) ("yas/replace-all" function (:arguments ("from" "to")) nil [18782 18952]) ("yas/snippet-table" function (:arguments ("mode")) nil [18954 19206]) ("yas/current-snippet-table" function nil nil [19207 19329]) ("yas/menu-keymap-for-mode" function (:arguments ("mode")) nil [19331 19581]) ("yas/current-key" function nil nil [19583 20320]) ("yas/synchronize-fields" function (:arguments ("field-group")) nil [20322 21006]) ("yas/current-field-text" function (:arguments ("field")) nil [21007 21265]) ("yas/overlay-modification-hook" function (:arguments ("overlay" "after?" "beg" "end" "&optional" "length")) nil [21268 21503]) ("yas/overlay-insert-in-front-hook" function (:arguments ("overlay" "after?" "beg" "end" "&optional" "length")) nil [21505 22085]) ("yas/overlay-maybe-insert-behind-hook" function (:arguments ("overlay" "after?" "beg" "end" "&optional" "length")) nil [22087 24008]) ("yas/remove-recent-undo-from-history" function nil nil [24010 24306]) ("yas/undo-expand-snippet" function (:arguments ("start" "key" "snippet")) nil [24308 24699]) ("yas/replace-fields-with-value" function (:arguments ("fields" "text")) nil [24701 25365]) ("yas/expand-snippet" function (:arguments ("start" "end" "template")) nil [25367 32846]) ("yas/current-snippet-overlay" function (:arguments ("&optional" "point")) nil [32848 33548]) ("yas/snippet-of-current-keymap" function (:arguments ("&optional" "point")) nil [33550 34118]) ("yas/current-overlay-for-navigation" function nil nil [34120 34804]) ("yas/navigate-group" function (:arguments ("group" "next?")) nil [34806 35219]) ("yas/parse-template" function (:arguments ("&optional" "file-name")) nil [35221 36763]) ("yas/directory-files" function (:arguments ("directory" "file?")) nil [36765 37175]) ("yas/make-menu-binding" function (:arguments ("template")) nil [37177 37395]) ("yas/modify-alist" function (:arguments ("alist" "key" "value")) nil [37397 37645]) ("yas/fake-keymap-for-popup" function (:arguments ("templates")) nil [37647 38045]) ("yas/point-to-coord" function (:arguments ("&optional" "point")) nil [38047 38485]) ("yas/x-popup-menu-for-template" function (:arguments ("templates")) nil [38487 38707]) ("yas/text-popup-for-template" function (:arguments ("templates")) nil [38708 38867]) ("yas/dropdown-list-popup-for-template" function (:arguments ("templates")) nil [38868 39584]) ("yas/popup-for-template" function (:arguments ("templates")) nil [39586 39756]) ("yas/load-directory-1" function (:arguments ("directory" "&optional" "parent")) nil [39758 40567]) ("yas/quote-string" function (:arguments ("string")) nil [40569 40870]) ("yas/compile-bundle" function (:arguments ("&optional" "yasnippet" "yasnippet-bundle" "snippet-roots" "code")) nil [40872 44442]) ("yas/about" function nil nil [44590 44754]) ("yas/reload-all" function (:user-visible-flag t) nil [44755 45091]) ("yas/load-directory" function (:user-visible-flag t :arguments ("directory")) nil [45093 45711]) ("yas/initialize" function nil nil [45713 46187]) ("yas/define-snippets" function (:arguments ("mode" "snippets" "&optional" "parent-mode")) nil [46189 49076]) ("yas/set-mode-parent" function (:arguments ("mode" "parent")) nil [49078 49442]) ("yas/define" function (:arguments ("mode" "key" "template" "&optional" "name" "condition" "group")) nil [49444 49919]) ("yas/hippie-try-expand" function (:arguments ("first-time?")) nil [49922 50399]) ("yas/expand" function (:user-visible-flag t) nil [50401 51759]) ("yas/next-field-group" function (:user-visible-flag t) nil [51761 53179]) ("yas/prev-field-group" function (:user-visible-flag t) nil [53181 54087]) ("yas/exit-snippet" function (:user-visible-flag t :arguments ("snippet")) nil [54089 54320]) ("yas/registered-snippets" variable nil nil [55302 55383]) ("make-variable-buffer-local" code nil nil [55405 55458]) ("yas/get-registered-snippets" function nil nil [55460 55630]) ("yas/register-snippet" function (:arguments ("snippet")) nil [55632 56225]) ("yas/unregister-snippet" function (:arguments ("snippet")) nil [56227 56822]) ("yas/exterminate-snippets" function (:user-visible-flag t) nil [56824 57096]) ("yas/cleanup-snippet" function (:arguments ("snippet")) nil [57098 57976]) ("yas/check-cleanup-snippet" function nil nil [57978 59081]) ("yas/field-undo-history" variable nil nil [60629 60884]) ("yas/field-undo-forbidden-commands" variable (:default-value (quote (undo aquamacs-undo redo aquamacs-redo))) nil [60886 61077]) ("yas/field-undo-before-hook" function nil nil [61079 61367]) ("yas/field-undo-after-hook" function nil nil [61369 63541]) ("yas/field-undo-group-text-change" function (:arguments ("group" "old-text")) nil [63543 64095]) ("yas/debug-some-vars" function nil nil [64160 65799]) ("yasnippet" package nil nil [65802 65822]) ("c-neutralize-syntax-in-CPP" function (:arguments ("around" "yas-mp/c-neutralize-syntax-in-CPP" "activate")) nil [66142 66465]) ("add-hook" code nil nil [66520 66752]) ("cl" include nil nil [69141 69154]) ("dropdown-list-face" variable (:user-visible-flag t :default-value (quote ((t :inherit default :background "lightyellow" :foreground "black")))) nil [69230 69362]) ("dropdown-list-selection-face" variable (:user-visible-flag t :default-value (quote ((t :inherit dropdown-list-face :background "purple")))) nil [69364 69492]) ("dropdown-list-overlays" variable nil nil [69494 69529]) ("dropdown-list-hide" function nil nil [69531 69643]) ("dropdown-list-put-overlay" function (:arguments ("beg" "end" "&optional" "prop" "value" "prop2" "value2")) nil [69645 69897]) ("dropdown-list-line" function (:arguments ("start" "replacement" "&optional" "no-insert")) nil [69899 71382]) ("dropdown-list-start-column" function (:arguments ("display-width")) nil [71384 71719]) ("dropdown-list-move-to-start-line" function (:arguments ("candidate-count")) nil [71721 72316]) ("dropdown-list-at-point" function (:arguments ("candidates" "&optional" "selidx")) nil [72318 73689]) ("dropdown-list" function (:arguments ("candidates")) nil [73691 75546]) ("define-key*" function (:arguments ("keymap" "key" "command")) nil [75548 75793]) ("combine-command" function (:arguments ("command" "defs")) nil [75795 76321]) ("command-selector-last-command" variable nil nil [76323 76395]) ("command-selector" function (:arguments ("&rest" "candidates")) nil [76397 77288]) ("dropdown-list" package nil nil [77312 77336]))
    :file "yasnippet.el"
    :pointmax 77468
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta2"
  :semanticdb-version "2.0beta2"
  )
