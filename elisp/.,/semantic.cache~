;; Object elisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "elisp/"
  :tables (list 
   (semanticdb-table "project.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("timezone" include nil nil [1553 1572]) ("appt" include nil nil [1573 1588]) ("cl" include nil nil [1589 1602]) ("defgroup" code nil nil [1604 1660]) ("project-version" variable (:constant-flag t :default-value (substring "$Revision: 1.5 $" 11 -2)) nil [1662 1825]) ("project-file" variable (:user-visible-flag t :default-value "~/Projects") nil [1827 1933]) ("project-current" variable nil nil [1935 2027]) ("project-open" variable nil nil [2029 2105]) ("project-level-separator-char" variable (:user-visible-flag t :default-value 47) nil [2107 2218]) ("project-subproject-indent" variable (:user-visible-flag t :default-value 2) nil [2220 2313]) ("project-prompt-for-project" function (:arguments ("&optional" "default")) nil [2315 2765]) ("project-format-entry" function (:arguments ("project" "op")) nil [2767 2977]) ("project-insert-entry" function (:arguments ("project" "op")) nil [2979 3429]) ("project-start" function (:user-visible-flag t :arguments ("project")) nil [3431 3828]) ("project-end" function (:user-visible-flag t :arguments ("project")) nil [3831 4098]) ("project-encode-date" function (:arguments ("date")) nil [4100 4622]) ("project-summarize" function (:user-visible-flag t :arguments ("project" "start" "end")) nil [4624 5491]) ("project-summarize-today" function (:user-visible-flag t :arguments ("project")) nil [5493 5804]) ("project-summarize-this-week" function (:user-visible-flag t :arguments ("project")) nil [5806 6089]) ("project-display-summary" function (:arguments ("alist")) nil [6092 6679]) ("project-format-summary-entry" function (:arguments ("entry" "name-length")) nil [6687 7059]) ("project-sum-projects" function (:arguments ("project" "start-time" "end-time")) nil [7063 8308]) ("project-add-time-to-alist" function (:arguments ("project" "secs" "alist")) nil [8310 8958]) ("project-report" function (:user-visible-flag t :arguments ("project")) nil [8969 10945]) ("project-alist" function nil nil [10949 11654]) ("project-elapsed-interval" function (:arguments ("start" "end")) nil [11656 11906]) ("project-elapsed-time" function (:arguments ("sec")) nil [11911 12681]) ("project-parent" function (:arguments ("project")) nil [12683 13161]) ("project-subproject-name" function (:arguments ("project")) nil [13163 13530]) ("project-level" function (:arguments ("project")) nil [13532 13874]) ("project-nested-subproject-name" function (:arguments ("project")) nil [13876 14239]) ("project-compare-alist-elements" function (:arguments ("el1" "el2")) nil [14241 14364]) ("project" package nil nil [14365 14383]))
    :file "project.el"
    :pointmax 14409
    :unmatched-syntax 'nil
    )
   (semanticdb-table "worklog.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [5039 5052]) ("timezone" include nil nil [5019 5038]) ("defgroup" code nil nil [5056 5109]) ("worklog-file" variable (:default-value "~/.worklog") nil [5145 5252]) ("worklog-fill-prefix" variable (:default-value "   ") nil [5254 5366]) ("worklog-automatic-login" variable nil nil [5368 5756]) ("worklog-mode-hook" variable nil nil [5758 5847]) ("worklog-use-minutes" variable (:default-value t) nil [5849 5978]) ("worklog-summarize-show-totals" variable nil nil [5980 6112]) ("worklog-reuse-summary-buffer" variable nil nil [6114 6369]) ("worklog-summarize-tasks-hook" variable nil nil [6371 6543]) ("worklog-mode-map" variable (:default-value (let ((m (copy-keymap text-mode-map))) (define-key m "" (quote worklog-finish)) (define-key m "" (quote worklog-add-entry)) (define-key m "" (quote worklog-kill-entry)) (define-key m "" (quote worklog-kill-entry)) (define-key m "" (quote worklog-summarize-tasks)) (define-key m "	" (quote worklog-add-entry-login)) (define-key m "" (quote worklog-add-entry-logout)) (define-key m "" (quote worklog-task-begin)) (define-key m "" (quote worklog-task-stop)) (define-key m "" (quote worklog-task-done)) (define-key m "" (quote worklog-forward-entry)) (define-key m "" (quote worklog-backward-entry)) (define-key m "\356" (quote worklog-forward-entry)) (define-key m "\360" (quote worklog-backward-entry)) m)) nil [6567 7448]) ("worklog-font-lock-defaults" variable (:default-value (list (quote worklog-font-lock-keywords) nil nil nil nil)) nil [7450 7579]) ("worklog-font-lock-keywords" variable (:default-value (list "^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]")) nil [7581 7734]) ("worklog-target-column" variable (:default-value 17) nil [7736 7808]) ("worklog-task-history" variable nil nil [7810 7865]) ("worklog-logged-in" variable nil nil [7867 7950]) ("worklog" function (:user-visible-flag t) nil [7971 8112]) ("worklog-show" function (:user-visible-flag t) nil [8114 8221]) ("worklog-mode" function (:user-visible-flag t) nil [8223 8792]) ("worklog-xmas-read-char" function (:arguments ("&optional" "prompt")) nil [8998 9460]) ("if" code nil nil [9462 9586]) ("timezone-parse-date" function (:arguments ("date")) nil [9845 15274]) ("worklog-do-task" function (:arguments ("task" "&optional" "autostop")) nil [15291 16988]) ("worklog-task-begin" function (:user-visible-flag t :arguments ("task")) nil [17005 17516]) ("worklog-task-stop" function (:user-visible-flag t) nil [17533 17680]) ("worklog-task-done" function (:user-visible-flag t) nil [17697 17844]) ("worklog-summarize-tasks" function (:user-visible-flag t) nil [17861 19841]) ("worklog-finish" function (:user-visible-flag t) nil [19872 19979]) ("worklog-add-entry" function (:user-visible-flag t) nil [19981 20190]) ("worklog-add-entry-login" function (:user-visible-flag t) nil [20192 20308]) ("worklog-add-entry-logout" function (:user-visible-flag t) nil [20310 20434]) ("worklog-kill-entry" function (:user-visible-flag t :arguments ("n")) nil [20436 20628]) ("worklog-backward-entry" function (:user-visible-flag t :arguments ("n")) nil [20630 20768]) ("worklog-forward-entry" function (:user-visible-flag t :arguments ("n")) nil [20770 20979]) ("worklog-make-date-time" function (:arguments ("&optional" "time")) nil [20997 21266]) ("worklog-time-diff" function (:arguments ("a" "b")) nil [21404 21863]) ("worklog-parse-date/time" function (:arguments ("date/time")) nil [21865 22136]) ("worklog-grok-region" function (:arguments ("b" "e")) nil [22138 24389]) ("worklog-sum-to-hours-1" function (:arguments ("seconds")) nil [24434 25027]) ("worklog-sum-to-hours" function (:arguments ("seconds-list")) nil [25029 25223]) ("worklog" package nil nil [25225 25243]))
    :file "worklog.el"
    :pointmax 25271
    :unmatched-syntax '((thing 5052 . 5053) (thing 5001 . 5018) (thing 5000 . 5001))
    )
   (semanticdb-table "mirror.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("comint" include nil nil [3779 3796]) ("mirror-sftp-command" variable (:user-visible-flag t :default-value "sftp") nil [3798 3927]) ("make-variable-buffer-local" code nil nil [3928 3977]) ("mirror-password-prompt-regexp" variable (:default-value comint-password-prompt-regexp) nil [3979 4104]) ("make-variable-buffer-local" code nil nil [4182 4241]) ("mirror-login-prompt-regexp" variable (:default-value "Login:\\|Name.*:") nil [4243 4350]) ("make-variable-buffer-local" code nil nil [4351 4407]) ("mirror-prompt-regexp" variable (:default-value "^s*ftp>") nil [4409 4503]) ("make-variable-buffer-local" code nil nil [4551 4601]) ("mirror-time-to-connection" variable (:user-visible-flag t :default-value 10) nil [4603 4728]) ("make-variable-buffer-local" code nil nil [4729 4784]) ("mirror-update-command" variable (:user-visible-flag t :default-value "put") nil [4786 5001]) ("make-variable-buffer-local" code nil nil [5002 5053]) ("mirror-update-on-save" variable (:user-visible-flag t) nil [5055 5162]) ("make-variable-buffer-local" code nil nil [5163 5214]) ("mirror-file-host" variable (:user-visible-flag t) nil [5216 5384]) ("make-variable-buffer-local" code nil nil [5385 5431]) ("mirror-file-path" variable (:user-visible-flag t) nil [5433 5509]) ("make-variable-buffer-local" code nil nil [5510 5556]) ("mirror-update-this-file-maybe" function nil nil [5558 5869]) ("check-for-mirror-this-file" function nil nil [5871 6180]) ("add-hook" code nil nil [6182 6243]) ("mirror-update-this-file" function (:user-visible-flag t) nil [6245 6514]) ("mirror-initial-filter" function (:arguments ("proc" "string")) nil [6582 7623]) ("mirror-update-remote-file" function nil nil [7625 10158]) ("mirror" package nil nil [10161 10178]))
    :file "mirror.el"
    :pointmax 10340
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jka-compr-ccrypt.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("defgroup" code nil nil [6039 6111]) ("defgroup" code nil nil [6113 6201]) ("jka-compr-ccrypt-shell" variable (:user-visible-flag t :default-value "sh") nil [6204 6584]) ("jka-compr-ccrypt-shell-escape" function (:arguments ("x")) nil [6586 6939]) ("jka-compr-ccrypt-compression-info-list" variable (:default-value (quote (["\\.Z\\(~\\|\\.~[0-9]+~\\)?\\'" "compressing" ("compress" "-c") "uncompressing" ("uncompress" "-c") nil t (0) nil] ["\\.bz2\\(~\\|\\.~[0-9]+~\\)?\\'" "bzip2ing" ("bzip2") "bunzip2ing" ("bzip2" "-d") nil t (0) nil] ["\\.tgz\\'" "zipping" ("gzip" "-c" "-q") "unzipping" ("gzip" "-c" "-q" "-d") t nil (0 2) nil] ["\\.gz\\(~\\|\\.~[0-9]+~\\)?\\'" "zipping" ("gzip" "-c" "-q") "unzipping" ("gzip" "-c" "-q" "-d") t t (0 2) nil] ["\\.cpt\\(\\#\\|~\\|\\.~[0-9]+~\\)?\\'" "encrypting" ("ccrypt" "-q" "-E" "KEY") "decrypting" ("ccrypt" "-q" "-d" "-E" "KEY") nil t (0) t]))) nil [7129 10415]) ("jka-compr-ccrypt-mode-alist-additions" variable (:default-value (list (cons "\\.tgz\\'" (quote tar-mode)))) nil [10417 10585]) ("jka-compr-ccrypt-added-to-file-coding-system-alist" variable nil nil [10662 10725]) ("jka-compr-ccrypt-file-name-handler-entry" variable nil nil [10727 10869]) ("jka-compr-ccrypt-info-regexp" function (:arguments ("info")) nil [10958 11030]) ("jka-compr-ccrypt-info-compress-message" function (:arguments ("info")) nil [11031 11103]) ("jka-compr-ccrypt-info-compress-command" function (:arguments ("info")) nil [11104 11176]) ("jka-compr-ccrypt-info-uncompress-message" function (:arguments ("info")) nil [11177 11249]) ("jka-compr-ccrypt-info-uncompress-command" function (:arguments ("info")) nil [11250 11322]) ("jka-compr-ccrypt-info-can-append" function (:arguments ("info")) nil [11323 11395]) ("jka-compr-ccrypt-info-strip-extension" function (:arguments ("info")) nil [11396 11468]) ("jka-compr-ccrypt-info-retval-list" function (:arguments ("info")) nil [11469 11541]) ("jka-compr-ccrypt-info-password-flag" function (:arguments ("info")) nil [11542 11614]) ("jka-compr-ccrypt-get-compression-info" function (:arguments ("filename")) nil [11616 12144]) ("jka-compr-ccrypt-substitute" function (:arguments ("list" "key" "value")) nil [12146 12315]) ("jka-compr-ccrypt-buffer-password" variable nil nil [12317 12422]) ("make-variable-buffer-local" code nil nil [12424 12486]) ("jka-compr-ccrypt-read-passwd" function (:arguments ("&optional" "confirm" "default")) nil [12488 12627]) ("jka-compr-ccrypt-get-buffer-password" function (:arguments ("&optional" "buffer")) nil [12629 12872]) ("jka-compr-ccrypt-set-buffer-password" function (:arguments ("password" "&optional" "buffer")) nil [12874 13122]) ("ccrypt-set-buffer-password" function (:user-visible-flag t) nil [13124 13309]) ("put" code nil nil [13311 13391]) ("jka-compr-ccrypt-error" function (:arguments ("command" "infile" "message" "&optional" "errfile")) nil [13455 13994]) ("jka-compr-ccrypt-dd-program" variable (:default-value "/bin/dd") nil [13996 14044]) ("jka-compr-ccrypt-dd-blocksize" variable (:default-value 256) nil [14046 14088]) ("jka-compr-ccrypt-partial-uncompress" function (:arguments ("command" "message" "infile" "beg" "len" "retvals" "&optional" "password")) nil [14090 15521]) ("jka-compr-ccrypt-call-process2" function (:arguments ("command" "infile" "buffer" "display" "&optional" "shell")) nil [15523 16237]) ("jka-compr-ccrypt-call-process" function (:arguments ("command" "shell" "message" "infile" "output" "retvals" "&optional" "password")) nil [16239 17239]) ("jka-compr-ccrypt-temp-name-template" variable (:default-value (expand-file-name "jka-com" temporary-file-directory)) nil [17332 17609]) ("jka-compr-ccrypt-temp-name-table" variable (:default-value (make-vector 31 nil)) nil [17611 17673]) ("jka-compr-ccrypt-make-temp-name" function (:arguments ("&optional" "local-copy")) nil [17675 18530]) ("jka-compr-ccrypt-delete-temp-file" function (:arguments ("temp")) nil [18533 18720]) ("jka-compr-ccrypt-write-region" function (:arguments ("start" "end" "file" "&optional" "append" "visit")) nil [18723 22169]) ("jka-compr-ccrypt-insert-file-contents" function (:arguments ("file" "&optional" "visit" "beg" "end" "replace")) nil [22172 26288]) ("jka-compr-ccrypt-file-local-copy" function (:arguments ("file")) nil [26291 28182]) ("jka-compr-ccrypt-load" function (:arguments ("file" "&optional" "noerror" "nomessage" "nosuffix")) nil [28227 28774]) ("jka-compr-ccrypt-byte-compiler-base-file-name" function (:arguments ("file")) nil [28776 29071]) ("put" code nil nil [29074 29142]) ("put" code nil nil [29143 29227]) ("put" code nil nil [29228 29302]) ("put" code nil nil [29303 29355]) ("put" code nil nil [29356 29461]) ("jka-compr-ccrypt-inhibit" variable nil nil [29463 29684]) ("jka-compr-ccrypt-handler" function (:arguments ("operation" "&rest" "args")) nil [29686 29946]) ("jka-compr-ccrypt-run-real-handler" function (:arguments ("operation" "args")) nil [30150 30440]) ("toggle-auto-compression" function (:user-visible-flag t :arguments ("&optional" "arg" "message")) nil [31106 32030]) ("jka-compr-ccrypt-build-file-regexp" function nil nil [32032 32214]) ("jka-compr-ccrypt-install" function nil nil [32217 33877]) ("jka-compr-ccrypt-uninstall" function nil nil [33880 35435]) ("jka-compr-ccrypt-installed-p" function nil nil [35444 35851]) ("jka-compr-installed-p" function nil nil [36017 36082]) ("jka-compr" package nil nil [36083 36103]) ("jka-compr-get-compression-info" function (:arguments ("fullname")) nil [36104 36204]) ("and" code nil nil [36395 36465]) ("jka-compr-ccrypt-install" code nil nil [36467 36493]) ("jka-compr-ccrypt" package nil nil [36496 36523]))
    :file "jka-compr-ccrypt.el"
    :pointmax 36559
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta2"
  :semanticdb-version "2.0beta2"
  )
