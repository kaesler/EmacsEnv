(defun advance (n s &optional ci)
  (let ((c (if ci ci ?\n)))
    (while (not (equal (substring s n (+ n 1)) (concat (cons c nil))))
      (setq n (+ n 1)))
    n))

(defun splice (s &optional ci)
  (let ((c (if ci ci ?\n)))
    (let ((o (make-vector (count c s) nil)) (b 0) (e 0) (i 0))
      (while (< i (length o))
	(setq e (advance (+ 1 e) s c))
	(setf (aref o i) (substring s b e))
	(setq i (+ i 1))
	(setq b (+ e 1)))
      o)))

(defun insert-space-mtx (s)
  (let ((y 0))
    (while (< y (cdr s))
      (let ((x 0))
	(while (< x (car s))
	  (insert "      ")
	  (setq x (+ x 1))))
      (insert "\n")
      (setq y (+ y 1)))))

(defun esheet-load ()
  "Convert a saved eshet document into an active esheet document."
;  (interactive)
  (cond
   ((< (point-max) 5) (insert "      "))
   ((equal (buffer-substring 1 10) ";;Esheet\n")
    (let ((data (splice (buffer-substring (point-min) (point-max)))))
      (let ((size (car (read-from-string (aref data 1)))))
	(erase-buffer)
	(insert-space-mtx size)
	(let ((i 2) (x 0) (y 0))
	  (while (< i (length data))
	    (add-text-properties (find-curs-n x y)
				 (+ (find-curs-n x y) 6)
				 (list 'value
				       (aref data i)))
	    (setq i (+ i 1))
	    (setq x (+ x 1))
	    (if (>= x (car size))
		(progn
		  (setq x 0)
		  (setq y (+ y 1))))))))
    (restore-cursor-function))
   (t (message "cannot load"))) 
  (recalculate-all))

(defun get-sheet-size ()
  (let ((x (line-length)) (y (/ (point-max) (line-length))))
    (cons (/ x 6) y)))

(defun esheet-save-prep ()
  "prep a document for saving"
  (let ((size (get-sheet-size)))
    (let ((o (make-vector (* (car size) (cdr size)) nil)))
      (let ((i 0))
	(while (< i (length o))
	  (setf (aref o i) (get-text-property (+ (+ 1 (* 6 i)) (/ i (car size))) 'value))
	  (setq i (+ i 1))))
      (erase-buffer)
      (insert ";;Esheet\n")
      (insert (concat "(" (int-to-string (car size)) " . " 
		      (int-to-string (cdr size)) ")\n"))
      (let ((i 0))
	(while (< i (length o))
	  (insert (concat (aref o i) "\n"))
	  (setq i (+ i 1)))))))


(defun esheet-save ()
  (interactive)
  (esheet-save-prep)
  (save-buffer)
  (esheet-load))

(defun esheet-save-as (filename)
  (interactive "F")
  (esheet-save-prep)
  (write-file filename)
  (esheet-load))
