
(defun unhighlite-region () "restore original properties to the region"
  (if (and esheet-region (cdr esheet-region))
      (let (
	    (x1 (min (caar esheet-region) (cadr esheet-region)))
	    (x2 (max (caar esheet-region) (cadr esheet-region)))
	    (y1 (min (cdar esheet-region) (cddr esheet-region)))
	    (y2 (max (cdar esheet-region) (cddr esheet-region))))
	(let ((x x1))
	  (while (<= x x2)
	    (let ((y y1))
	      (while (<= y y2)
		(if (or (not (equal x cursX)) (not (equal y cursY)))
		    (let ((n (find-curs-n x y)))
		      (rest-prop n (+ n 6))))
		(setq y (+ 1 y))
		)
	      )
	    (setq x (+ x 1))
	    )
	  )
	)
    )
  )

(defun highlite-region () "restore original properties to the region"
  (let (
	(x1 (min (caar esheet-region) (cadr esheet-region)))
	(x2 (max (caar esheet-region) (cadr esheet-region)))
	(y1 (min (cdar esheet-region) (cddr esheet-region)))
	(y2 (max (cdar esheet-region) (cddr esheet-region))))
    (let ((x x1))
      (while (<= x x2)
	(let ((y y1))
	  (while (<= y y2)
	    (if (or (not (equal x cursX)) (not (equal y cursY)))
		(let ((n (find-curs-n x y)))
		  (cov-prop n (+ n 6)) (add-text-properties n (+ n 6) '(face primary-selection))))
	    (setq y (+ 1 y))
	    )
	  )
	(setq x (+ 1 x))
	)
      )
    )
  )

(defun adjust-region () "adjust the second half of the esheet-region to the cursor pos."
;  (message "!")
;  (unhighlite-region)
;  (message "@")
  (setf (cdr esheet-region) (cons cursX cursY))
;  (message "#")
  (highlite-region)
  (message (concat "range:" (int-to-string (caar esheet-region)) ","
		   (int-to-string (cdar esheet-region))
		   ".." (int-to-string (cadr esheet-region))
		   "," (int-to-string (cddr esheet-region))))
  )

(defun shift-up () "go up w/ region"
  (interactive)
  (if (not esheet-region) (setq esheet-region (cons (cons cursX cursY) nil)))
  (let ((es esheet-region)) 
    (unhighlite-region) (setq esheet-region nil)
    (go-up) (setq esheet-region es) (adjust-region))
  )

(defun shift-down () "go down w/ region"
  (interactive)
  (if (not esheet-region) (setq esheet-region (cons (cons cursX cursY) nil)))
  (let ((es esheet-region)) 
    (unhighlite-region) (setq esheet-region nil)
    (go-down) (setq esheet-region es) (adjust-region))
  )

(defun shift-left () "go left w/ region"
  (interactive)
  (if (not esheet-region) (setq esheet-region (cons (cons cursX cursY) nil)))
  (let ((es esheet-region)) 
    (unhighlite-region) (setq esheet-region nil)
    (go-left) (setq esheet-region es) (adjust-region))
  )

(defun shift-right () "go right w/ region"
  (interactive)
  (if (not esheet-region) (setq esheet-region (cons (cons cursX cursY) nil)))
  (let ((es esheet-region)) 
    (unhighlite-region) (setq esheet-region nil)    
    (go-right) (setq esheet-region es) (adjust-region))
  )

(defun esheet-copy () "put the esheet-region into the esheet-clipboard"
  (interactive)
  (if (not esheet-region) (setq esheet-region (cons (cons cursX cursY) (cons cursX cursY))))
  (let (
	(x1 (min (caar esheet-region) (cadr esheet-region)))
	(x2 (max (caar esheet-region) (cadr esheet-region)))
	(y1 (min (cdar esheet-region) (cddr esheet-region)))
	(y2 (max (cdar esheet-region) (cddr esheet-region))))
    (setq esheet-clipboard (make-vector (- x2 x1 -1) nil))
    (let ((x 0))
      (while (< x (length esheet-clipboard))
	(setf (aref esheet-clipboard x) (make-vector (- y2 y1 -1) nil))
	(setq x (+ x 1))
	)
      )
    (let ((x 0))
      (while (< x (length esheet-clipboard))
	(let ((y 0))
	  (while (< y (length (aref esheet-clipboard x)))
	    (setf (aref (aref esheet-clipboard x) y)
		  (get-text-property (find-curs-n (+ x x1) (+ y y1)) 'value))
	    (setq y (+ y 1))
	    )
	  )
	(setq x (+ x 1))
	)
      )
    )
  )

(defun to-string-if-not (d)
  (if (stringp d) d (prin1-to-string d)))

(defun esheet-copy-values ()
  (interactive)
  (let ((esheet-region (if esheet-region esheet-region (cons (cons cursX cursY) (cons cursX cursY)))))
    (setq esheet-clipboard
	  (apply #'vector
		 (mapcar #'(lambda
			     (x) (apply #'vector 
					(mapcar 
					 #'to-string-if-not x)))
			 (rrange 
			  (min (caar esheet-region) (cadr esheet-region))
			  (min (cdar esheet-region) (cddr esheet-region))
			  (max (caar esheet-region) (cadr esheet-region))
			  (max (cdar esheet-region) (cddr esheet-region))
			  nil nil t))))
    )
  )

(defun esheet-paste () "put the esheet-clipboard into the main page"
  (interactive)
  (while (> (length esheet-clipboard) (- (/ (line-length) 6) cursX)) ;this probably won't be called
    (add-col))
  (while (> (length (aref esheet-clipboard 0)) (- (count-lines (point-min) (point-max)) cursY)) ;this probably won't be called
    (add-row))
  (if (boundp 'esheet-clipboard)
      (if esheet-region
	  (progn
	    (let (
		  (x1 (min (caar esheet-region) (cadr esheet-region)))
		  (x2 (max (caar esheet-region) (cadr esheet-region)))
		  (y1 (min (cdar esheet-region) (cddr esheet-region)))
		  (y2 (max (cdar esheet-region) (cddr esheet-region))))	    
	      (let ((x x1))
		(while (<= x x2)
		  (let ((y y1))
		    (while (<= y y2)
		      (add-text-properties (find-curs-n x y)
					   (+ (find-curs-n x y) 5)
					   (list 'value (aref (aref esheet-clipboard 
					(mod (- x x1) (length esheet-clipboard)))
					(mod (- y y1) (length (aref esheet-clipboard 0))))))
		      (setq y (+ 1 y))
		      )
		    )
		  (setq x (+ 1 x))
		  )
		)
	      (let ((x x1))
		(while (<= x x2)
		  (let ((y y1))
		    (while (<= y y2)
		      (refresh-cell x y)
		      (setq y (+ 1 y))
		      )
		    )
		  (setq x (+ 1 x))
		  )
		)
	      )
	    )
	(progn
	  (let ((x 0))
	    (while (< x (length esheet-clipboard))
	      (let ((y 0))
		(while (< y (length (aref esheet-clipboard x)))
		  (add-text-properties (find-curs-n (+ x cursX) (+ y cursY))
				       (+ (find-curs-n (+ x cursX) (+ y cursY)) 5)
				       (list 'value (aref (aref esheet-clipboard x) y)))
		  (setq y (+ y 1))
		  )
	      )
	      (setq x (+ 1 x))
	      )
	    )
	  (let ((x 0))
	    (while (< x (length esheet-clipboard))
	      (let ((y 0))
		(while (< y (length (aref esheet-clipboard x)))
		  (refresh-cell (+ x cursX) (+ y cursY))
		  (setq y (+ y 1))
		  )
		)
	      (setq x (+ 1 x))
	      )
	    )
	  )
	(message "empty clipboard")
	)
    )
  )

(defun esheet-clear () "get rid of all data in the esheet-region"
  (interactive)
  (if esheet-region 
       (progn
	 (let (
	       (x1 (min (caar esheet-region) (cadr esheet-region)))
	       (x2 (max (caar esheet-region) (cadr esheet-region)))
	       (y1 (min (cdar esheet-region) (cddr esheet-region)))
	       (y2 (max (cdar esheet-region) (cddr esheet-region))))
	   (let ((x x1))
	     (while (<= x x2)
	       (let ((y y1))
		 (while (<= y y2)
		   (add-text-properties (find-curs-n x y) (+ 6 (find-curs-n x y)) '(value nil))
		   (refresh-cell x y)
		   (setq y (+ y 1))
		   )
		 )
	       (setq x (+ 1 x))
	       )
	     )
	   )
	 )
       (message "No region active!")
       )
  )

(defun intel-del () (interactive)
  (if esheet-region
      (esheet-clear)
    (add-text-properties (find-curs-n cursX cursY)
			 (+ (find-curs-n cursX cursY) 5)
			 '(value "")))
  (refresh-cell cursX cursY)
  )

(defun esheet-cut () (interactive)
  (esheet-copy)
  (intel-del)
  )