Info file: vm.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `vm.texinfo'
using `texinfmt.el' version 2.38 of 3 July 1998.

This file documents the VM mail reader.

Copyright (C) 1989, 1991, 1999 Kyle E. Jones

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.



File: vm.info, Node: Frames and Windows, Next: Toolbar, Prev: Virtual Folders, Up: Top

Frames and Windows
******************

VM uses Emacs frames and windows to display messages and summaries and
to provide a place for you to compose messages.  Using VM's frame
configuration facilities you can control when VM creates new frames
and the size and attributes associated with new frames.  Inside each
frame you can associate different window setups with commands and
classes of commands by using VM's window configuration facilities.

To use VM's frame configuration features, the variable
`vm-mutable-frames' must be set non-`nil'.  This is the default.  If
`vm-mutable-frames' is set to nil VM will only use the current frame,
and VM will not create, delete or resize frames.

To use window configurations, the variable `vm-mutable-windows' must
be set non-`nil'.  If `vm-mutable-windows' is set to nil, VM will only
use the selected window, and will not create, delete or resize
windows.

* Menu:

* Frame Configuration::		How to configure frame use and appearance.
* Window Configuration::	How to configure window use and appearance.



File: vm.info, Node: Frame Configuration, Next: Window Configuration, Prev: Frames and Windows, Up: Frames and Windows

Frame Configuration
===================

VM has a set of variables that let you specify when VM creates frames
and what attributes the new frames will have.

If `vm-frame-per-folder' is set non-`nil', when you visit a folder, VM
will create a new frame and display that folder in the new frame.
When you quit the folder, VM will delete the frame.

If `vm-frame-per-summary' is set non-`nil', the `vm-summarize' command
will create a new frame in which to display a folder's summary buffer.
This works best if a full-screen window configuration has been
assigned to the `vm-summarize' command.  When you quit the folder or
kill the summary, VM will delete the frame.

Setting `vm-frame-per-composition' non-`nil' causes VM to create a new
frame for the composition buffer when you run any of VM's message
composition commands.  E.g. `vm-reply-include-text', `vm-mail',
`vm-forward-message'.  When you finish editing the composition and
send it, or when you kill the composition buffer, the frame will be
deleted.

The variable `vm-frame-per-edit', if non-`nil', tells VM to create a
new frame when the vm-edit-message command is run.  When you finish
editing the message, or abort the edit, the frame will be deleted.

If `vm-frame-per-help' is set non-`nil', VM will create a new frame to
display any help buffer produced by the vm-help command.

If `vm-frame-per-completion' is set non-`nil', VM will create a new
frame on mouse initiated completing reads.  A mouse initiated
completing read occurs when you invoke a VM command using the mouse,
either with a menu or a toolbar button.  That command must then prompt
you for information, and there must be a limited set of valid
responses.  If these conditions are met and
`vm-frame-per-completion''s value is non-`nil', VM will create a new
frame containing a list of responses that you can select with the
mouse.

When VM is deciding whether to create a new frame, it checks other
existing frames to see if a buffer that it wants to display in a frame
is already being displayed somewhere.  If so, then VM will not create
a new frame.  If you don't want VM to search other frames, set the
variable `vm-search-other-frames' to `nil'.  VM will still search the
currently selected frame and will not create a new frame if the buffer
that it wants to display is visible there.

The variable `vm-frame-parameter-alist' allows you to specify the
frame parameters for newly created frames.

The value of `vm-frame-parameter-alist' should be of this form

     ((SYMBOL PARAMLIST) (SYMBOL2 PARAMLIST2) ...)

SYMBOL must be one of "completion", "composition", "edit", "folder",
"primary-folder" or "summary".  It specifies the type of frame that
the following PARAMLIST applies to.

`completion'
     specifies parameters for frames that display lists of choices
     generated by a mouse-initiated completing read.  (See
     `vm-frame-per-completion'.)
`composition'
     specifies parameters for mail composition frames.
`edit'
     specifies parameters for message edit frames (e.g. created by
     `vm-edit-message-other-frame')
`folder'
     specifies parameters for frames created by `vm' and the
     `vm-visit-' commands.
`primary-folder'
     specifies parameters for the frame created by running `vm'
     without any arguments.
`summary'
     specifies parameters for frames that display a summary buffer
     (e.g. created by `vm-summarize-other-frame')
PARAMLIST is a list of pairs as described in the documentation for the
function `make-frame'.



File: vm.info, Node: Window Configuration, Prev: Frame Configuration, Up: Frames and Windows

Window Configuration
====================

Window configurations allow you to specify how the windows within a
frame should look for a particular command or class of commands.  Each
command can have a configuration associated with it and you can also
associate a configuration with command classes like "reading-message"
or "composing-message".  To setup a window configuration, first use
Emacs' window management commands (`split-window', `enlarge-window',
etc.)  to make the windows in the frame look the way you want.  Then
use the switch-to-buffer command to put the buffers you want to see
into the windows.  Next type `W S', which invokes the
`vm-save-window-configuration' command.  Type the name of the command
or class of commands to which you want the configuration to apply.
Nearly all VM commands can be entered here.  Valid classes are:

         default
         startup
         quitting
         reading-message
         composing-message
         marking-message
         searching-message

When a VM command is executed, window configurations are searched for
as follows.  First, a command specific configuration is searched for.
If one is found, it is used.  Next a class configuration is searched
for.  Not all commands are in command classes.  Message composition
commands are in the "composing-message" class.  All the `vm-quit*'
commands are in the "quitting" class.  All the VM commands that set
and clear message marks are in the "marking-message" class, and so on.
If such a class configuration is found it is used.  If no matching
class configuration is found, the "default" class configuration is
used, if it is defined.

Note that when a window configuration is saved the selected window at
that time will be the selected window when that window configuration
is used.  So if you prefer for the cursor to be in a particular
window, make sure you invoke `vm-save-window-configuration' window
from that window.  Remember that you can invoke the command with `M-x'
if VM's normal keymap is not in effect.

To delete a window configuration, use `W D' which is bound to
`vm-delete-window-configuration'.  You will be prompted for the name
of the configuration to delete.

To see what an existing configuration looks like, type `W W' which
invokes `vm-apply-window-configuration'.

VM saves information about your window configurations in the file
named by the variable `vm-window-configuration-file'.  The default
location of the configuration file is `"~/.vm.windows"'.  Do not make
`vm-window-configuration-file' point to the same location as
`vm-init-file', as the window configuration save commands will then
overwrite the content of your init file.



File: vm.info, Node: Toolbar, Next: Menus, Prev: Frames and Windows, Up: Top

Toolbar
*******

VM can display a toolbar that allows you to run VM commands with a
single mouse click.  By default the toolbar is displayed on the left
of the Emacs frame and is only visible if you're running under a
window system like X Windows or Microsoft Windows.

To make VM not display the toolbar, set `vm-use-toolbar' to nil.  To
configure what buttons are displayed on the toolbar, you must change
the value of `vm-use-toolbar'.  If non-`nil', the value of
`vm-use-toolbar' should be a list of symbols and integers, which
specify which buttons appear on the toolbar and the layout of the
buttons.  These are the allowed symbols along with the buttons they
represent.

`autofile'
     The AutoFile button.  Clicking on this button runs the command
     `vm-toolbar-autofile-message'.  This command will save the
     current message into the folder matched by
     `vm-auto-folder-alist', if there is a match.
`compose'
     The Compose button.  Clicking on this button runs the command
     `vm-toolbar-compose-command'.  This command is normally just an
     alias for the `vm-mail' command.  If you want the Compose button
     to do something else, redefine `vm-toolbar-compose-command' using
     either `fset' or `defun'.
`delete/undelete'
     The Delete/Undelete button.  If the current message is marked for
     deletion, this button displays as an Undelete button.  Otherwise
     it displays as a Delete button.
`file'
     The File button.  Clicking on this button runs the command
     `vm-toolbar-file-command'.  This command is normally just an
     alias for the `vm-mail' command.  If you want the File button to
     do something else, redefine `vm-toolbar-file-command' using
     either `fset' or `defun'.
`getmail'
     The Get Mail button.  Clicking on this button runs the command
     `vm-toolbar-getmail-command'.  This command is normally just an
     alias for the `vm-get-new-mail' command.  If you want the Get
     Mail button to do something else, redefine
     `vm-toolbar-getmail-command' using either `fset' or `defun'.
`help'
     The Helper button.  Clicking on this button runs the command
     `vm-toolbar-helper-command'.  This command normally just runs
     `vm-help', but it also does context specific things under certain
     conditions.  If the current message is a MIME message that needs
     decoding, the Helper button becomes the Decode MIME button.  If
     the current folder has an autosave file that appears to be the
     result of an Emacs or system crash, the Helper button becomes the
     Recover button.  Clicking on the Recover button runs
     `recover-file', so you can recover your folder from an existing
     autosave file.
`mime'
     The Decode MIME button.  Clicking on this button runs the command
     `vm-toolbar-mime-command'.  This command is normally just an
     alias for the `vm-decode-mime-message' command.
`next'
     The Next button.  Clicking on this button runs the command
     `vm-toolbar-next-command'.  This command is normally just an
     alias for the `vm-next-message' command.  If you want the Next
     button to do something else, redefine `vm-toolbar-next-command'
     using either `fset' or `defun'.
`previous'
     The Previous button.  Clicking on this button runs the command
     `vm-toolbar-previous-command'.  This command is normally just an
     alias for the `vm-previous-message' command.  If you want the
     Previous button to do something else, redefine
     `vm-toolbar-previous-command' using either `fset' or `defun'.
`print'
     The Print button.  Clicking on this button runs the command
     `vm-toolbar-print-command'.  This command is normally just an
     alias for the `vm-print-message' command.  If you want the Print
     button to do something else, redefine `vm-toolbar-print-command'
     using either `fset' or `defun'.
`quit'
     The Quit button.  Clicking on this button runs the command
     `vm-toolbar-quit-command'.  This command is normally just an
     alias for the `vm-quit' command.  If you want the Quit button to
     do something else, redefine `vm-toolbar-quit-command' using
     either `fset' or `defun'.
`reply'
     The Reply button.  Clicking on this button runs the command
     `vm-toolbar-reply-command'.  This command is normally just an
     alias for the `vm-reply-include-text' command.  If you want the
     Reply button to do something else, redefine
     `vm-toolbar-reply-command' using either `fset' or `defun'.
`visit'
     The Visit button.  Clicking on this button runs the command
     `vm-toolbar-visit-command'.  This command is normally just an
     alias for the `vm-visit-folder' command.  If you want the Visit
     button to do something else, redefine `vm-toolbar-visit-command'
     using either `fset' or `defun'.
`nil'
     If nil appears in the list, it must appear exactly once.  The
     buttons associated with symbols that appear after nil in the list
     will be display flushright for top and bottom toolbars, and
     flushbottom for left and right toolbars.

If an positive integer appears in the the `vm-use-toolbar' list, it
specifies the number of pixels of blank space to display between the
button that comes before and the button that comes after the integer.

The variable `vm-toolbar-orientation' controls on which side of the
frame the toolbar is displayed.  E.g.

     (setq vm-toolbar-orientation 'top)

causes the toolbar to be displayed at the top of the frame.  The `top'
in the example can be replaced with `bottom', `right' and `left' to
make the toolbar appear in those places instead.

VM finds the images for the toolbar in the directory specified by
`vm-toolbar-pixmap-directory'.  This variable should already be set
properly by whoever installed VM on your system, so you should not
need to set it.



File: vm.info, Node: Menus, Next: Faces, Prev: Toolbar, Up: Top

Menus
*****

VM uses Emacs' menubar and popup menus when they are available to give
you access to more of VM's commands.  By default VM puts a context
sensitive popup menu on mouse button 3 (usually the rightmost mouse
button).  If you don't want this menu, set the variable
`vm-popup-menu-on-mouse-3' to nil.

If you set `vm-use-menus' to nil, VM will not generate a menubar for
VM folder buffers and VM won't use popup menus either.  If you set
`vm-use-menus' to `1', VM will add a single `VM' entry to the existing
menubar instead of using the whole menubar for its purposes.  That
single entry will have all the VM command submenus under it.

To make VM use the whole menubar, you must set variable `vm-use-menus'
to a list of symbols.  The symbols and the order in which they are
listed determine which menus will be in the menubar and how they are
ordered.  Valid symbol values are:
`dispose'
     This is menu of commands that are commonly used to dispose of a
     message.  E.g. reply, print, save, delete.
`emacs'
     This is actually a menu button that causes the menubar to change
     to the global Emacs menubar.  On that menubar you will find a VM
     button that will return you to the VM menubar.
`folder'
     This is a menu of folder related commands.  You can visit a
     folder, save a folder, quit a folder and so on.
`help'
     This is a menu of commands that provide information for you if
     you don't know what to do next.
`label'
     This is a menu of commands that let you add and remove message
     labels from messages.
`mark'
     This is a menu of commands that you can use to mark and unmark
     messages based on various criteria.  *Note Message Marks::.
`motion'
     This is a menu of commands to move around inside messages and
     inside folders.
`send'
     This is a menu of commands you use to compose and send messages.
`sort'
     This is a menu of commands to sort a folder by various criteria.
`undo'
     This is a menu button that invokes the `vm-undo' command.
`virtual'
     This is a menu of commands that let you visit and create virtual
     folders.
`nil'
     If nil appears in the list, it should appear exactly once.  All
     menus after nil in the list will be displayed flushright in the
     menubar.



File: vm.info, Node: Faces, Next: Using the Mouse, Prev: Menus, Up: Top

Faces
*****

VM uses Emacs faces to emphasize text in the folder and summary
buffers.  Instead of defining VM specific faces, VM's face usage is
controlled by customization variables that can point to faces.  This
allows you to use standard Emacs faces, or to create your own.  So
when you want to change which face is used, write code like this:

     (setq vm-summary-highlight-face 'bold-italic)

In the summary buffer, VM displays the summary entry for the current
message using the face specified by the `vm-summary-highlight-face'
variable.  The value of this variable should be a symbol that names a
face, or nil which means don't display the summary entry of the
current message in a special way.

The variable `vm-mouse-track-summary' controls whether summary entries
are highlighted when the mouse pointer passes over them.  The
highlighting is done using the standard Emacs `highlight' face.

In the folder buffer, the header contents of headers matched by the
`vm-highlighted-header-regexp' variable are displayed using the face
named by `vm-highlighted-header-face'.  This variable is ignored under
XEmacs if `vm-use-lucid-highlighting' is non-`nil'.  The XEmacs
`highlight-headers' package is used instead.  See the documentation
for the function `highlight-headers' to find out how to customize
header highlighting using this package.

URL's that occur in message bodies are displayed using the face named
by `vm-highlight-url-face'.  Searching for URLs in a large message can
take a long time.  Since URLs often occur near the beginning and near
the end of messages, VM offers a way to search just those parts of a
message for URLs.  The variable `vm-url-search-limit' specifies how
much of a message to search.  If `vm-url-search-limit' has a positive
numeric value N, VM will search the first N / 2 characters and the
last N / 2 characters in the message for URLs.

The face named by `vm-mime-button-face' is used to display the textual
buttons that trigger the display of MIME objects.



File: vm.info, Node: Using the Mouse, Next: Hooks, Prev: Faces, Up: Top

Using the Mouse
***************

VM uses the following layout for the mouse buttons in the folder and
summary buffers.

button-1 (left button usually)
     Unchanged.
button-2 (middle button usually)
     Activate.  If you click on a summary entry, that message will be
     selected and become the current message.  If you click on a
     highlighted URL in the body of a message, that URL will be sent
     to the browser specified by `vm-url-browser'.
button-3 (right button usually)
     Context Menu.  If the mouse pointer is over the contents of the
     From header, button-3 pops up a menu of actions that can be taken
     using the author of the message as a parameter.  For instance,
     you may want to create a virtual folder containing all the
     messages in the current folder written by this author.  If the
     mouse pointer is over the contents of the Subject header, a menu
     of actions to be performed on the current message's subject is
     produced.  If button-3 is clicked over a highlighted URL, a menu
     of Web browsers is produced.  Otherwise the normal VM mode
     specific menu is produced.

In mail composition buffers only mouse button-3 is affected.  Context
sensitive menus are produced when that button is clicked.



File: vm.info, Node: Hooks, Next: Key Index, Prev: Using the Mouse, Up: Top

Hooks
*****

VM has many hook variables that allow you to run functions when
certain events occur.  Here is a list of the hooks and when they are
run.  (If you don't write Emacs-Lisp programs you can skip this
chapter.)

`vm-select-new-message-hook'
     List of hook functions called every time a message with the "new"
     attribute is made to be the current message.  When the hooks are
     run, the current buffer will be the folder containing the message
     and the start and end of the message will be bracketed by
     (point-min) and (point-max).

`vm-select-unread-message-hook'
     List of hook functions called every time a message with the
     "unread" attribute is made to be the current message.  When the
     hooks are run, the current buffer will be the folder containing
     the message and the start and end of the message will be
     bracketed by (point-min) and (point-max).

`vm-select-message-hook'
     List of hook functions called every time a message is made to be
     the current message.  When the hooks are run, the current buffer
     will be the folder containing the message and the start and end
     of the message will be bracketed by (point-min) and (point-max).

`vm-arrived-message-hook'
     List of hook functions called once for each message gathered from
     the system mail spool, or from another folder with
     `vm-get-new-mail', or from a digest with `vm-burst-digest'.  When
     the hooks are run, the current buffer will be the folder
     containing the message and the start and end of the message will
     be bracketed by (point-min) and (point-max).

`vm-spooled-mail-waiting-hook'
     List of functions called when VM first notices mail is spooled
     for a folder.  The folder buffer will be current when the hooks
     are run.

`vm-arrived-messages-hook'
     List of hook functions called after VM has gathered a group of
     messages from the system mail spool, or from another folder with
     `vm-get-new-mail', or from a digest with `vm-burst-digest'.  When
     the hooks are run, the new messages will have already been added
     to the message list but may not yet appear in the summary.  When
     the hooks are run the current buffer will be the folder
     containing the messages.

`vm-reply-hook'
     List of hook functions to be run after a Mail mode composition
     buffer has been created for a reply.  VM runs this hook and then
     runs `vm-mail-mode-hook' before leaving you in the Mail mode
     buffer.

`vm-forward-message-hook'
     List of hook functions to be run after a Mail mode composition
     buffer has been created to forward a message.  VM runs this hook
     and then runs `vm-mail-mode-hook' before leaving the user in the
     Mail mode buffer.

`vm-resend-bounced-message-hook'
     List of hook functions to be run after a Mail mode composition
     buffer has been created to resend a bounced message.  VM runs
     this hook and then runs `vm-mail-mode-hook' before leaving you in
     the Mail mode buffer.

`vm-resend-message-hook'
     List of hook functions to be run after a Mail mode composition
     buffer has been created to resend a message.  VM runs this hook
     and then runs `vm-mail-mode-hook' before leaving you in the Mail
     mode buffer.

`vm-send-digest-hook'
     List of hook functions to be run after a Mail mode composition
     buffer has been created to send a digest.  VM runs this hook and
     then runs `m-mail-mode-hook' before leaving you in the Mail mode
     buffer.

`vm-mail-hook'
     List of hook functions to be run after a Mail mode composition
     buffer has been created to send a non specialized message, i.e. a
     message that is not a reply, forward, digest, etc.  VM runs this
     hook and then runs `vm-mail-mode-hook' before leaving you in the
     Mail mode buffer.

`vm-summary-update-hook'
     List of hook functions called just after VM updates an existing
     entry in a folder summary buffer.

`vm-summary-redo-hook'
     List of hook functions called just after VM adds or deletes
     entries from a folder summary buffer.

`vm-visit-folder-hook'
     List of hook functions called just after VM visits a folder.  It
     doesn't matter if the folder buffer already exists, this hook is
     run each time `vm' or `vm-visit-folder' is called interactively.
     It is *not* run after `vm-mode' is called.

`vm-retrieved-spooled-mail-hook'
     List of hook functions called just after VM has retrieved a group
     of messages from your system mailbox(es).  When these hooks are
     run, the messages have been added to the folder buffer but not
     the message list or summary.  When the hooks are run, the current
     buffer will be the folder where the messages were incorporated.

`vm-edit-message-hook'
     List of hook functions to be run just before a message is edited.
     This is the last thing `vm-edit-message' does before leaving you
     in the edit buffer.

`vm-mail-mode-hook'
     List of hook functions to be run after a Mail mode composition
     buffer has been created.  This is the last thing VM does before
     leaving you in the Mail mode buffer.

`vm-mode-hook'
     List of hook functions to run when a buffer enters `vm-mode'.
     These hook functions should generally be used to set key bindings
     and local variables.

`vm-mode-hooks'
     Old name for `vm-mode-hook'.  Supported for backward
     compatibility.  You should use the new name.

`vm-summary-mode-hook'
     List of hook functions to run when a VM summary buffer is
     created.  The current buffer will be that buffer when the hooks
     are run.

`vm-summary-mode-hooks'
     Old name for `vm-summary-mode-hook'.  Supported for backward
     compatibility.  You should use the new name.

`vm-virtual-mode-hook'
     List of hook functions to run when a VM virtual folder buffer is
     created.  The current buffer will be that buffer when the hooks
     are run.

`vm-presentation-mode-hook'
     List of hook functions to run when a VM presentation buffer is
     created.  The current buffer will be the new presentation buffer
     when the hooks are run.  Presentation buffers are used to display
     messages when some type of decoding must be done to the message
     to make it presentable.  E.g. MIME decoding.

`vm-quit-hook'
     List of hook functions to run when you quit VM.  This applies to
     any VM quit command.

`vm-summary-pointer-update-hook'
     List of hook functions to run when the VM summary pointer is
     updated.  When the hooks are run, the current buffer will be the
     summary buffer.

`vm-display-buffer-hook'
     List of hook functions that are run every time VM wants to
     display a buffer.  When the hooks are run, the current buffer
     will be the buffer that VM wants to display.  The hooks are
     expected to select a window and VM will display the buffer in
     that window.

     If you use display hooks, you should not use VM's builtin window
     configuration system as the result is likely to be confusing.

`vm-undisplay-buffer-hook'
     List of hook functions that are run every time VM wants to remove
     a buffer from the display.  When the hooks are run, the current
     buffer will be the buffer that VM wants to disappear.  The hooks
     are expected to do the work of removing the buffer from the
     display.  The hook functions should not kill the buffer.

     If you use undisplay hooks, you should not use VM's builtin
     window configuration system as the result is likely to be
     confusing.

`vm-iconify-frame-hook'
     List of hook functions that are run whenever VM iconifies a
     frame.

`vm-menu-setup-hook'
     List of hook functions that are run just after all menus are
     initialized.

`vm-mime-display-function'
     If non-`nil', this should name a function to be called inside
     `vm-decode-mime-message' to do the MIME display of the current
     message.  The function is called with no arguments, and at the
     time of the call the current buffer will be the "presentation
     buffer" for the folder, which is a temporary buffer that VM uses
     for the display of MIME messages.  A copy of the current message
     will be in the presentation buffer at that time.  The normal work
     that `vm-decode-mime-message' would do is not done, because this
     function is expected to subsume all of it.

`vm-mail-send-hook'
     List of hook functions to call just before sending a message.
     The hooks are run after confirming that you want to send the
     message (see `vm-confirm-mail-send' but before MIME encoding and
     FCC processing.

`mail-yank-hooks'
     Hooks called after a message is yanked into a mail composition
     buffer.

     (This hook is deprecated, you should use mail-citation-hook
     instead.)

     The value of this hook is a list of functions to be run.  Each
     hook function can find the newly yanked message between point and
     mark.  Each hook function should return with point and mark
     around the yanked message.

     See the documentation for `vm-yank-message' to see when VM will
     run these hooks.

`mail-citation-hook'
     Hook for modifying a citation just inserted in the mail buffer.
     Each hook function can find the citation between (point) and
     (mark t).  And each hook function should leave point and mark
     around the citation text as modified.

     If this hook is entirely empty, i.e. `nil', a default action is
     taken instead of no action.



File: vm.info, Node: Key Index, Next: Command Index, Prev: Hooks, Up: Top

Key Index
*********

* Menu:

* A:                            Saving Messages.        98.
* B:                            Forwarding Messages.    35.
* C-_:                          Message Attributes.     43.
* C-c C-a:                      MIME Composition.       11.
* C-c C-a:                      Sending Messages.       31.
* C-c C-b:                      MIME Composition.       38.
* C-c C-b:                      Sending Messages.       63.
* C-c C-e:                      MIME Composition.       49.
* C-c C-e:                      Sending Messages.       66.
* C-c C-m:                      Sending Messages.       54.
* C-c C-p:                      MIME Composition.       42.
* C-c C-p:                      Sending Messages.       74.
* C-c C-v:                      Sending Messages.       27.
* C-c C-y:                      Sending Messages.       10.
* C-x u:                        Message Attributes.     43.
* DEL:                          Introduction.           18.
* ###:                          Deleting Messages.      25.
* F:                            Replying.               58.
*                             Forwarding Messages.    17.
* G:                            Sorting Messages.       5.
* L:                            Starting Up.            5.
* M A:                          Message Marks.          44.
* M C:                          Message Marks.          24.
* M S:                          Message Marks.          38.
* M T:                          Message Marks.          31.
* M a:                          Message Marks.          47.
* M c:                          Message Marks.          28.
* M-n:                          Selecting Messages.     73.
* M-p:                          Selecting Messages.     73.
* M s:                          Message Marks.          41.
* M-s:                          Selecting Messages.     79.
* M t:                          Message Marks.          35.
* N:                            Selecting Messages.     67.
* P:                            Selecting Messages.     67.
* R:                            Replying.               51.
* $ RET:                        Reading MIME Messages.  51.
* RET:                          Selecting Messages.     60.
* *:                            Reading Digests.        12.
* $ |:                          Reading MIME Messages.  51.
* S:                            Introduction.           56.
* SPC:                          Introduction.           18.
* |:                            Saving Messages.        105.
* TAB:                          Selecting Messages.     64.
* b:                            Introduction.           18.
* d:                            Deleting Messages.      9.
* $ d:                          Reading MIME Messages.  51.
* $ d:                          Reading MIME Messages.  51.
* $ e:                          Reading MIME Messages.  51.
* f:                            Replying.               55.
* g:                            Introduction.           101.
* h:                            Summaries.              5.
* k:                            Deleting Messages.      21.
* l a:                          Message Attributes.     52.
* l d:                          Message Attributes.     52.
* m:                            Sending Messages.       75.
* n:                            Selecting Messages.     5.
* $ p:                          Reading MIME Messages.  51.
* p:                            Selecting Messages.     5.
* q:                            Introduction.           76.
* r:                            Replying.               48.
* $ s:                          Reading MIME Messages.  51.
* s:                            Saving Messages.        14.
* u:                            Deleting Messages.      15.
* v:                            Starting Up.            34.
* $ w:                          Reading MIME Messages.  51.
* w:                            Saving Messages.        92.
* x:                            Introduction.           76.
* z:                            Forwarding Messages.    8.



File: vm.info, Node: Command Index, Next: Variable Index, Prev: Key Index, Up: Top

Command Index
*************

* Menu:

* vm:                           Starting Up.            13.
* vm-add-message-labels:        Message Attributes.     52.
* vm-auto-archive-messages:     Saving Messages.        98.
* vm-burst-digest:              Reading Digests.        12.
* vm-delete-message:            Deleting Messages.      9.
* vm-delete-message-labels:     Message Attributes.     52.
* vm-expose-hidden-headers:     Previewing.             60.
* vm-expunge-folder:            Deleting Messages.      25.
* vm-followup:                  Replying.               55.
* vm-followup-include-text:     Replying.               58.
* vm-forward-message:           Forwarding Messages.    8.
* vm-get-new-mail:              Getting New Mail.       5.
* vm-get-new-mail:              Introduction.           101.
* vm-goto-message:              Selecting Messages.     60.
* vm-goto-message:              Selecting Messages.     64.
* vm-isearch-backward:          Selecting Messages.     79.
* vm-isearch-forward:           Selecting Messages.     79.
* vm-kill-subject:              Deleting Messages.      21.
* vm-load-init-file:            Starting Up.            5.
* vm-mail:                      Sending Messages.       75.
* vm-mark-matching-messages:    Message Marks.          24.
* vm-mark-messages-same-author: Message Marks.          44.
* vm-mark-messages-same-subject: Message Marks.         38.
* vm-mark-thread-subtree:       Message Marks.          31.
* vm-mime-encode-composition:   Sending Messages.       66.
* vm-mode:                      Starting Up.            46.
* vm-next-message:              Selecting Messages.     5.
* vm-next-message-no-skip:      Selecting Messages.     67.
* vm-next-unread-message:       Selecting Messages.     73.
* vm-pipe-message-to-command:   Saving Messages.        105.
* vm-preview-composition:       Sending Messages.       74.
* vm-previous-message:          Selecting Messages.     5.
* vm-previous-message-no-skip:  Selecting Messages.     67.
* vm-previous-unread-message:   Selecting Messages.     73.
* vm-quit:                      Introduction.           76.
* vm-quit-just-bury:            Introduction.           90.
* vm-quit-just-iconify:         Introduction.           97.
* vm-quit-no-change:            Introduction.           76.
* vm-reply:                     Replying.               48.
* vm-reply-include-text:        Replying.               51.
* vm-resend-message:            Forwarding Messages.    35.
* vm-save-folder:               Introduction.           56.
* vm-save-message:              Saving Messages.        14.
* vm-save-message-sans-headers: Saving Messages.        92.
* vm-scroll-backward:           Introduction.           18.
* vm-scroll-forward:            Introduction.           18.
* vm-send-digest:               Forwarding Messages.    17.
* vm-sort-messages:             Sorting Messages.       5.
* vm-summarize:                 Summaries.              5.
* vm-toggle-threads-display:    Threading.              9.
* vm-undelete-message:          Deleting Messages.      15.
* vm-undo:                      Message Attributes.     43.
* vm-unmark-matching-messages:  Message Marks.          28.
* vm-unmark-messages-same-author: Message Marks.        47.
* vm-unmark-messages-same-subject: Message Marks.       41.
* vm-unmark-thread-subtree:     Message Marks.          35.
* vm-visit-folder:              Starting Up.            34.
* vm-yank-message:              Sending Messages.       10.
* vm-yank-message-other-folder: Sending Messages.       10.



File: vm.info, Node: Variable Index, Next: License, Prev: Command Index, Up: Top

Variable Index
**************

* Menu:

* mail-citation-hook:           Hooks.                  255.
* mail-yank-hooks:              Hooks.                  239.
* vm-arrived-message-hook:      Hooks.                  35.
* vm-arrived-messages-hook:     Hooks.                  50.
* vm-auto-center-summary:       Summaries.              5.
* vm-auto-decode-mime-messages: Reading MIME Messages.  42.
* vm-auto-displayed-mime-content-type-exceptions: Reading MIME Messages.  97.
* vm-auto-displayed-mime-content-types: Reading MIME Messages.  51.
* vm-auto-displayed-mime-content-types: Reading MIME Messages.  83.
* vm-auto-folder-alist:         Saving Messages.        32.
* vm-auto-folder-case-fold-search: Saving Messages.     60.
* vm-auto-get-new-mail:         Getting New Mail.       9.
* vm-auto-get-new-mail:         Starting Up.            13.
* vm-auto-next-message:         Paging.                 5.
* vm-berkeley-mail-compatibility: Saving Messages.      113.
* vm-circular-folders:          Selecting Messages.     22.
* vm-confirm-new-folders:       Saving Messages.        22.
* vm-confirm-quit:              Introduction.           83.
* vm-crash-box:                 Starting Up.            20.
* vm-crash-box-suffix:          Spool Files.            69.
* vm-delete-after-archiving:    Saving Messages.        82.
* vm-delete-after-saving:       Saving Messages.        82.
* vm-delete-empty-folders:      Introduction.           72.
* vm-digest-center-preamble:    Forwarding Messages.    28.
* vm-digest-preamble-format:    Forwarding Messages.    28.
* vm-digest-send-type:          Forwarding Messages.    17.
* vm-display-buffer-hook:       Hooks.                  187.
* vm-display-using-mime:        Reading MIME Messages.  5.
* vm-edit-message-hook:         Hooks.                  128.
* vm-fill-paragraphs-containing-long-lines: Paging.     25.
* vm-flush-interval:            Message Attributes.     64.
* vm-folder-directory:          Saving Messages.        26.
* vm-folder-file-precious-flag: Introduction.           64.
* vm-follow-summary-cursor:     Selecting Messages.     39.
* vm-follow-summary-cursor:     Summaries.              137.
* vm-forward-message-hook:      Hooks.                  67.
* vm-forwarding-digest-type:    Forwarding Messages.    8.
* vm-forwarding-subject-format: Forwarding Messages.    8.
* vm-frame-parameter-alist:     Frame Configuration.    50.
* vm-frame-per-completion:      Frame Configuration.    32.
* vm-frame-per-composition:     Frame Configuration.    18.
* vm-frame-per-edit:            Frame Configuration.    25.
* vm-frame-per-folder:          Frame Configuration.    8.
* vm-frame-per-help:            Frame Configuration.    29.
* vm-frame-per-summary:         Frame Configuration.    12.
* vm-gargle-uucp:               Summaries.              144.
* vm-highlight-url-face:        Faces.                  31.
* vm-highlighted-header-face:   Faces.                  23.
* vm-highlighted-header-face:   Previewing.             48.
* vm-highlighted-header-regexp: Faces.                  23.
* vm-highlighted-header-regexp: Previewing.             48.
* vm-iconify-frame-hook:        Hooks.                  210.
* vm-imap-auto-expunge-alist:   IMAP Spool Files.       88.
* vm-imap-bytes-per-session:    IMAP Spool Files.       71.
* vm-imap-expunge-after-retrieving: IMAP Spool Files.   80.
* vm-imap-max-message-size:     IMAP Spool Files.       61.
* vm-imap-messages-per-session: IMAP Spool Files.       71.
* vm-in-reply-to-format:        Replying.               32.
* vm-included-text-attribution-format: Replying.        24.
* vm-included-text-prefix:      Replying.               17.
* vm-infer-mime-types:          Reading MIME Messages.  322.
* vm-init-file:                 Starting Up.            5.
* vm-invisible-header-regexp:   Previewing.             29.
* vm-jump-to-new-messages:      Selecting Messages.     50.
* vm-jump-to-unread-messages:   Selecting Messages.     50.
* vm-mail-check-interval:       Getting New Mail.       15.
* vm-mail-hook:                 Hooks.                  95.
* vm-mail-mode-hook:            Hooks.                  134.
* vm-mail-send-hook:            Hooks.                  232.
* vm-make-crash-box-name:       Spool Files.            93.
* vm-make-spool-file-name:      Spool Files.            93.
* vm-menu-setup-hook:           Hooks.                  215.
* vm-mime-7bit-composition-charset: MIME Composition.   60.
* vm-mime-8bit-composition-charset: MIME Composition.   68.
* vm-mime-8bit-text-transfer-encoding: MIME Composition.  83.
* vm-mime-alternative-select-method: Reading MIME Messages.  312.
* vm-mime-attachment-auto-suffix-alist: Reading MIME Messages.  212.
* vm-mime-base64-decoder-program: Reading MIME Messages.  15.
* vm-mime-base64-decoder-switches: Reading MIME Messages.  15.
* vm-mime-base64-encoder-program: Reading MIME Messages.  15.
* vm-mime-base64-encoder-switches: Reading MIME Messages.  15.
* vm-mime-button-face:          Faces.                  40.
* vm-mime-charset-font-alist:   Reading MIME Messages.  268.
* vm-mime-confirm-delete:       Reading MIME Messages.  69.
* vm-mime-decode-for-preview:   Reading MIME Messages.  42.
* vm-mime-default-face-charsets: Reading MIME Messages.  251.
* vm-mime-display-function:     Hooks.                  220.
* vm-mime-external-content-type-exceptions: Reading MIME Messages.  201.
* vm-mime-external-content-types-alist: Reading MIME Messages.  134.
* vm-mime-internal-content-type-exceptions: Reading MIME Messages.  130.
* vm-mime-internal-content-types: Reading MIME Messages.  112.
* vm-mime-qp-decoder-program:   Reading MIME Messages.  15.
* vm-mime-qp-decoder-switches:  Reading MIME Messages.  15.
* vm-mime-qp-encoder-program:   Reading MIME Messages.  15.
* vm-mime-qp-encoder-switches:  Reading MIME Messages.  15.
* vm-mime-uuencode-decoder-program: Reading MIME Messages.  15.
* vm-mime-uuencode-decoder-switches: Reading MIME Messages.  15.
* vm-mode-hook:                 Hooks.                  140.
* vm-mode-hooks:                Hooks.                  146.
* vm-mouse-track-summary:       Faces.                  19.
* vm-move-after-deleting:       Deleting Messages.      26.
* vm-move-after-killing:        Deleting Messages.      26.
* vm-move-after-undeleting:     Deleting Messages.      26.
* vm-move-messages-physically:  Sorting Messages.       5.
* vm-movemail-program:          Spool Files.            14.
* vm-movemail-program-switches: Spool Files.            14.
* vm-mutable-frames:            Frames and Windows.     12.
* vm-mutable-windows:           Frames and Windows.     17.
* vm-paragraph-fill-column:     Paging.                 25.
* vm-pop-auto-expunge-alist:    POP Spool Files.        74.
* vm-pop-bytes-per-session:     POP Spool Files.        58.
* vm-pop-expunge-after-retrieving: POP Spool Files.     66.
* vm-pop-max-message-size:      POP Spool Files.        48.
* vm-pop-md5-program:           POP Spool Files.        36.
* vm-pop-messages-per-session:  POP Spool Files.        58.
* vm-popup-menu-on-mouse-3:     Menus.                  5.
* vm-presentation-mode-hook:    Hooks.                  168.
* vm-preview-lines:             Previewing.             16.
* vm-preview-read-messages:     Previewing.             56.
* vm-primary-inbox:             Starting Up.            13.
* vm-quit-hook:                 Hooks.                  176.
* vm-reply-hook:                Hooks.                  60.
* vm-reply-ignored-addresses:   Replying.               67.
* vm-reply-subject-prefix:      Replying.               5.
* vm-resend-bounced-message-hook: Hooks.                74.
* vm-resend-message-hook:       Hooks.                  81.
* vm-retrieved-spooled-mail-hook: Hooks.                120.
* vm-search-other-frames:       Frame Configuration.    42.
* vm-search-using-regexps:      Selecting Messages.     79.
* vm-select-message-hook:       Hooks.                  28.
* vm-select-new-message-hook:   Hooks.                  10.
* vm-select-unread-message-hook: Hooks.                 20.
* vm-send-digest-hook:          Hooks.                  88.
* vm-send-using-mime:           MIME Composition.       5.
* vm-send-using-mime:           Sending Messages.       31.
* vm-skip-deleted-messages:     Selecting Messages.     5.
* vm-skip-read-messages:        Selecting Messages.     5.
* vm-spool-file-suffixes:       Spool Files.            69.
* vm-spool-files:               Spool Files.            4.
* vm-spooled-mail-waiting-hook: Hooks.                  44.
* vm-startup-with-summary:      Starting Up.            54.
* vm-strip-reply-headers:       Replying.               39.
* vm-subject-ignored-prefix:    Sorting Messages.       25.
* vm-subject-ignored-suffix:    Sorting Messages.       25.
* vm-subject-significant-chars: Sorting Messages.       36.
* vm-summary-arrow:             Summaries.              5.
* vm-summary-format:            Summaries.              19.
* vm-summary-mode-hook:         Hooks.                  151.
* vm-summary-mode-hooks:        Hooks.                  157.
* vm-summary-pointer-update-hook: Hooks.                181.
* vm-summary-redo-hook:         Hooks.                  108.
* vm-summary-thread-indent-level: Threading.            9.
* vm-summary-uninteresting-senders: Summaries.          118.
* vm-summary-uninteresting-senders-arrow: Summaries.    118.
* vm-summary-update-hook:       Hooks.                  103.
* vm-thread-using-subject:      Threading.              18.
* vm-toolbar-orientation:       Toolbar.                106.
* vm-toolbar-pixmap-directory:  Toolbar.                115.
* vm-undisplay-buffer-hook:     Hooks.                  198.
* vm-url-search-limit:          Faces.                  31.
* vm-use-menus:                 Menus.                  11.
* vm-use-toolbar:               Toolbar.                10.
* vm-virtual-mode-hook:         Hooks.                  162.
* vm-visible-headers:           Previewing.             24.
* vm-visit-folder-hook:         Hooks.                  113.
* vm-visit-when-saving:         Saving Messages.        67.
* vm-window-configuration-file: Window Configuration.   51.



File: vm.info, Node: License, Prev: Variable Index, Up: Top

GNU GENERAL PUBLIC LICENSE
**************************
                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     675 Mass Ave, Cambridge, MA 02139, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.


Preamble
========

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if
you distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on,
we want its recipients to know that what they have is not the
original, so that any problems introduced by others will not reflect
on the original authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at
all.

  The precise terms and conditions for copying, distribution and
modification follow.

   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
     a notice placed by the copyright holder saying it may be
     distributed under the terms of this General Public License.  The
     "Program", below, refers to any such program or work, and a "work
     based on the Program" means either the Program or any derivative
     work under copyright law: that is to say, a work containing the
     Program or a portion of it, either verbatim or with modifications
     and/or translated into another language.  (Hereinafter,
     translation is included without limitation in the term
     "modification".)  Each licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based
     on the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an
     appropriate copyright notice and disclaimer of warranty; keep
     intact all the notices that refer to this License and to the
     absence of any warranty; and give any other recipients of the
     Program a copy of this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section
     1 above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any
          change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands
          interactively when run, you must cause it, when started
          running for such interactive use in the most ordinary way,
          to print or display an announcement including an appropriate
          copyright notice and a notice that there is no warranty (or
          else, saying that you provide a warranty) and that users may
          redistribute the program under these conditions, and telling
          the user how to view a copy of this License.  (Exception: if
          the Program itself is interactive but does not normally
          print such an announcement, your work based on the Program
          is not required to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the Program,
     and can be reasonably considered independent and separate works
     in themselves, then this License, and its terms, do not apply to
     those sections when you distribute them as separate works.  But
     when you distribute the same sections as part of a whole which is
     a work based on the Program, the distribution of the whole must
     be on the terms of this License, whose permissions for other
     licensees extend to the entire whole, and thus to each and every
     part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the
     terms of Sections 1 and 2 above provided that you also do one of
     the following:

       a. Accompany it with the complete corresponding
          machine-readable source code, which must be distributed
          under the terms of Sections 1 and 2 above on a medium
          customarily used for software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than
          your cost of physically performing source distribution, a
          complete machine-readable copy of the corresponding source
          code, to be distributed under the terms of Sections 1 and 2
          above on a medium customarily used for software interchange;
          or,

       c. Accompany it with the information you received as to the
          offer to distribute corresponding source code.  (This
          alternative is allowed only for noncommercial distribution
          and only if you received the program in object code or
          executable form with such an offer, in accord with
          Subsection b above.)

     The source code for a work means the preferred form of the work
     for making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it
     contains, plus any associated interface definition files, plus
     the scripts used to control compilation and installation of the
     executable.  However, as a special exception, the source code
     distributed need not include anything that is normally
     distributed (in either source or binary form) with the major
     components (compiler, kernel, and so on) of the operating system
     on which the executable runs, unless that component itself
     accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are
     not compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program
     is void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy
     simultaneously your obligations under this License and any other
     pertinent obligations, then as a consequence you may not
     distribute the Program at all.  For example, if a patent license
     would not permit royalty-free redistribution of the Program by
     all those who receive copies directly or indirectly through you,
     then the only way you could satisfy both it and this License
     would be to refrain entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe
     any patents or other property right claims or to contest validity
     of any such claims; this section has the sole purpose of
     protecting the integrity of the free software distribution
     system, which is implemented by public license practices.  Many
     people have made generous contributions to the wide range of
     software distributed through that system in reliance on
     consistent application of that system; it is up to the
     author/donor to decide if he or she is willing to distribute
     software through any other system and a licensee cannot impose
     that choice.

     This section is intended to make thoroughly clear what is
     believed to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version,
     but may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the
     Program does not specify a version number of this License, you
     may choose any version ever published by the Free Software
     Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to
     the author to ask for permission.  For software which is
     copyrighted by the Free Software Foundation, write to the Free
     Software Foundation; we sometimes make exceptions for this.  Our
     decision will be guided by the two goals of preserving the free
     status of all derivatives of our free software and of promoting
     the sharing and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
     OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
     YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH
     ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                     END OF TERMS AND CONDITIONS


How to Apply These Terms to Your New Programs
=============================================

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR

     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

Also add information on how to contact you by electronic and paper
mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c' 
     for details.

The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright
     interest in the program `Gnomovision'
     (which makes passes at compilers) written 
     by James Hacker.

     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

This General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library,
you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use
the GNU Library General Public License instead of this License.


