;; Object emacs/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs/"
  :tables (list 
   (semanticdb-table ".emacs.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("message" code nil nil [90 120]) ("esler-elisp-directory" variable (:default-value "~/apps/emacs/elisp") nil [530 581]) ("esler-verizon-storage-root" variable (:default-value "/ftp:kevin.a.esler@members.verizon.net:") nil [583 660]) ("esler-xemacs" variable (:default-value (string-match "XEmacs" emacs-version)) nil [714 773]) ("esler-emacs20" variable (:default-value (= emacs-major-version 20)) nil [774 823]) ("esler-emacs21" variable (:default-value (= emacs-major-version 21)) nil [824 873]) ("esler-emacs22" variable (:default-value (= emacs-major-version 22)) nil [874 923]) ("running-as-x-client" variable (:default-value (memq window-system (quote (x x11)))) nil [997 1055]) ("running-as-w32-client" variable (:default-value (memq window-system (quote (w32 win32 mswindows)))) nil [1056 1130]) ("running-as-terminal-client" variable (:default-value (null window-system)) nil [1131 1187]) ("running-as-xterm-client" variable (:default-value (and (not running-as-x-client) (or (equal "xterm" (getenv "TERM")) (equal "vt100" (getenv "TERM"))))) nil [1394 1605]) ("at-site-ibm" variable nil nil [1652 1676]) ("at-site-home" variable nil nil [1677 1702]) ("esler-command-output-first-line-as-string" function (:arguments ("command")) nil [1704 2214]) ("let" code nil nil [2216 2939]) ("if" code nil nil [2941 3060]) ("if" code nil nil [3061 3178]) ("esler-small-screen" variable (:default-value (< (display-pixel-width) 1600)) nil [3180 3238]) ("add-hook" code nil nil [3239 3386]) ("clearcase-viewtag" function nil nil [3444 3889]) ("setq" code nil nil [3898 3926]) ("setq" code nil nil [3927 3958]) ("setq" code nil nil [3960 4004]) ("setq" code nil nil [4006 4038]) ("setq" code nil nil [4091 4123]) ("setq-default" code nil nil [4155 4190]) ("if" code nil nil [4246 4367]) ("setq-default" code nil nil [4464 4497]) ("setq" code nil nil [4576 4602]) ("setq" code nil nil [4603 4667]) ("setq" code nil nil [4752 4792]) ("put" code nil nil [4848 4883]) ("put" code nil nil [4884 4921]) ("put" code nil nil [4922 4958]) ("setq" code nil nil [5029 5060]) ("setq" code nil nil [5061 5092]) ("if" code nil nil [5146 5199]) ("find-cygwin-root" function nil nil [5245 5606]) ("cygwin-root" variable nil nil [5608 5632]) ("cygwin-bash-location" variable nil nil [5633 5666]) ("if" code nil nil [5667 5860]) ("setq" code nil nil [5888 5923]) ("esler-ultranet-user-name" variable (:default-value "esler") nil [5925 5966]) ("esler-verizon-user-name" variable (:default-value "kevin.a.esler") nil [5967 6015]) ("cond" code nil nil [6048 6820]) ("esler-register-emacs-process" function nil nil [6931 7901]) ("esler-unregister-emacs-process" function nil nil [7903 8471]) ("esler-process-exists" function (:arguments ("pid-string")) nil [8473 8725]) ("esler-cleanup-emacs-process-registry" function nil nil [8727 9435]) ("condition-case" code nil nil [9464 9533]) ("add-hook" code nil nil [9535 9594]) ("if" code nil nil [10053 10209]) ("if" code nil nil [10210 10324]) ("directory-sub-dirs" function (:arguments ("dir")) nil [10372 10682]) ("directory-sub-nondirs" function (:arguments ("dir")) nil [10684 11003]) ("esler-insert-iso-date" function nil nil [11005 11096]) ("esler-another-line" function (:user-visible-flag t :arguments ("num-lines")) nil [11098 12071]) ("esler-set-frame-colour" function (:arguments ("colour")) nil [12100 12278]) ("time-sheet" function (:prototype-flag t :user-visible-flag t) nil [12379 12456]) ("c-format" function (:prototype-flag t :user-visible-flag t) nil [12526 12624]) ("filter-current-buffer" function (:prototype-flag t :user-visible-flag t) nil [12697 12822]) ("flame" function (:prototype-flag t :user-visible-flag t) nil [12857 12898]) ("find-emacs-tag" function (:prototype-flag t :user-visible-flag t) nil [12945 13046]) ("count-region" function (:prototype-flag t :user-visible-flag t) nil [13086 13146]) ("what-cursor-position-and-line" function (:prototype-flag t :user-visible-flag t) nil [13241 13318]) ("stringset-extract-region" function (:prototype-flag t :user-visible-flag t) nil [13412 13513]) ("uniq" function (:prototype-flag t :user-visible-flag t) nil [13562 13646]) ("non-uniq" function (:prototype-flag t :user-visible-flag t) nil [13704 13800]) ("case-oid-regexp" variable (:constant-flag t :default-value (let ((hex "[0-9a-f]")) (concat hex hex hex hex hex hex hex hex "\\." hex hex hex hex hex hex hex hex "\\." hex hex hex hex "\\." hex hex ":" hex hex ":" hex hex ":" hex hex ":" hex hex ":" hex hex))) nil [13890 14314]) ("esler-oid-at-point" function nil nil [14316 14620]) ("esler-oid-at-cursor-to-date" function nil nil [14622 14993]) ("now" function nil nil [15014 15078]) ("set-mouse-shape" function (:user-visible-flag t :arguments ("form")) nil [15134 15506]) ("find-file-at-point" function (:user-visible-flag t :arguments ("&optional" "other-frame")) nil [15555 16284]) ("extract-file-name-around-point" function nil nil [16286 17265]) ("extract-buffer-name-around-point" function nil nil [17267 17793]) ("extract-ange-ftp-file-name-around-point" function nil nil [17833 20552]) ("esler-links-repository" variable (:constant-flag t :default-value "~/links") nil [20610 20720]) ("save-link-to-current-file" function (:user-visible-flag t :arguments ("link-path")) nil [20721 21657]) ("esler-emulate-apollo-again-key" function (:user-visible-flag t) nil [21726 21959]) ("time-stamp-buffer" function (:user-visible-flag t) nil [22105 23564]) ("trim-white-space-trailing" function (:user-visible-flag t) nil [23616 23783]) ("trim-white-space-leading" function (:user-visible-flag t) nil [23785 23957]) ("trim-white-space" function (:user-visible-flag t) nil [23959 24121]) ("trim-region-leading" function (:user-visible-flag t :arguments ("begin" "end")) nil [24123 24313]) ("trim-region-trailing" function (:user-visible-flag t :arguments ("begin" "end")) nil [24315 24508]) ("trim-region" function (:user-visible-flag t :arguments ("begin" "end")) nil [24510 24697]) ("esler-window-config-stack" variable nil nil [24769 24807]) ("push-window-config" function nil nil [24809 24961]) ("pop-window-config" function nil nil [24963 25267]) ("esler-sort-du-output" function (:user-visible-flag t) nil [25343 25997]) ("setq" code nil nil [26066 26117]) ("uptime" function nil nil [26119 26214]) ("edit-variable" package nil nil [26406 26430]) ("edit-variable" function (:user-visible-flag t :arguments ("var")) nil [26432 27484]) ("see-chars" function (:user-visible-flag t) nil [27599 28000]) ("region-width" function (:user-visible-flag t :arguments ("begin" "end")) nil [28094 28798]) ("buffer-width" function (:user-visible-flag t :arguments ("begin" "end")) nil [28800 29038]) ("current-line-length" function nil nil [29040 29138]) ("next-long-line" function (:user-visible-flag t) nil [29140 29394]) ("executing-on-my-home-node" function (:user-visible-flag t) nil [29461 29914]) ("iterate-over-lines-in-region" function (:arguments ("begin" "end" "func")) nil [30000 30787]) ("sort" include nil nil [30963 30978]) ("esler-sort-subr" function (:arguments ("reverse" "nextrecfun" "endrecfun" "&optional" "startkeyfun" "endkeyfun" "lessp-predicate")) nil [30980 34196]) ("esler-sort-lines" function (:user-visible-flag t :arguments ("reverse" "beg" "end")) nil [34231 34737]) ("mapreduce" function (:arguments ("l" "predicate")) nil [34775 35056]) ("mapreduce1" function (:arguments ("l" "predicate")) nil [35058 35138]) ("frame-rename" function (:arguments ("new-name")) nil [35168 35366]) ("extract-matches" function (:user-visible-flag t :arguments ("regexp")) nil [35449 35901]) ("esler-w32-preferred-font" variable (:default-value (if (or at-site-ibm esler-small-screen) "-*-Bitstream Vera Sans Mono-normal-r-*-*-12-90-96-96-c-*-iso8859-1" "-*-Bitstream Vera Sans Mono-normal-r-*-*-16-120-96-96-c-*-iso8859-1")) nil [35986 36266]) ("if" code nil nil [36268 36376]) ("if" code nil nil [37034 37260]) ("if" code nil nil [37262 37315]) ("setq" code nil nil [37354 37382]) ("setq" code nil nil [37383 37423]) ("setq" code nil nil [37504 37528]) ("setq" code nil nil [37529 37552]) ("if" code nil nil [37555 38751]) ("global-set-key" code nil nil [38818 38854]) ("global-set-key" code nil nil [38856 38899]) ("global-set-key" code nil nil [39003 39052]) ("global-set-key" code nil nil [39053 39101]) ("global-set-key" code nil nil [39137 39170]) ("hippie-expand" function (:prototype-flag t :user-visible-flag t) nil [39215 39289]) ("global-set-key" code nil nil [39290 39327]) ("global-set-key" code nil nil [39473 39506]) ("global-set-key" code nil nil [39543 39580]) ("global-set-key" code nil nil [39582 39633]) ("create-placemarker-window" function nil nil [39634 39763]) ("global-set-key" code nil nil [39765 39816]) ("global-set-key" code nil nil [39818 39867]) ("toggle-case-fold-search" function nil nil [39868 40112]) ("global-set-key" code nil nil [40114 40153]) ("current-line" function nil nil [40154 40453]) ("smart-recenter" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [40455 41352]) ("if" code nil nil [41354 41471]) ("global-set-key" code nil nil [41473 41528]) ("global-set-key" code nil nil [41590 41634]) ("global-set-key" code nil nil [41636 41675]) ("global-set-key" code nil nil [41773 41826]) ("esler-last-command-on-region" variable nil nil [41827 41868]) ("esler-shell-command-on-region" function (:user-visible-flag t) nil [41869 42504]) ("global-set-key" code nil nil [42506 42546]) ("global-unset-key" code nil nil [42610 42635]) ("global-set-key" code nil nil [42725 42767]) ("global-set-key" code nil nil [42768 42813]) ("global-set-key" code nil nil [42814 42855]) ("global-set-key" code nil nil [42856 42887]) ("global-set-key" code nil nil [42888 42929]) ("if" code nil nil [42931 43070]) ("scroll-up-one-line" function (:user-visible-flag t) nil [43071 43178]) ("scroll-down-one-line" function (:user-visible-flag t) nil [43180 43293]) ("global-set-key" code nil nil [43295 43348]) ("global-unset-key" code nil nil [43406 43433]) ("if" code nil nil [43499 44518]) ("mode-line-resize-dynamically" function (:user-visible-flag t) nil [44519 45980]) ("scroll-bar-resize-dynamically" function (:user-visible-flag t) nil [45982 47021]) ("if" code nil nil [47104 47291]) ("if" code nil nil [47404 47880]) ("set-default" code nil nil [47933 48327]) ("setq" code nil nil [48410 48450]) ("line-number-mode" code nil nil [48451 48471]) ("easymenu" include nil nil [48545 48564]) ("setq" code nil nil [48565 52242]) ("add-hook" code nil nil [52243 52280]) ("esler-gnus-new-frame" function nil nil [52283 52426]) ("esler-recover-inbox" function nil nil [52428 52508]) ("esler-dired-verizon-storage" function nil nil [52510 52601]) ("esler-read-ms-jdk-docs" function nil nil [52603 52743]) ("esler-read-sun-jdk-docs" function nil nil [52745 53136]) ("esler-start-unison-server" function (:user-visible-flag t :arguments ("port-number")) nil [53138 53500]) ("add-hook" code nil nil [53548 53589]) ("esler-eclipse-workspace-directory" variable (:default-value "~/apps/eclipse/workspaces") nil [53590 53722]) ("esler-make-eclipse-workspace-menu" function (:arguments ("ignored")) nil [53724 55510]) ("esler-invoke-eclipse-on-workspace" function (:arguments ("ws")) nil [55513 56251]) ("easy-menu-define" code nil nil [56254 56392]) ("add-hook" code nil nil [56440 56482]) ("esler-mirrored-files-directory" variable (:default-value "~/tasks/") nil [56483 56533]) ("esler-make-mirrored-files-menu" function (:arguments ("ignored")) nil [56535 58330]) ("easy-menu-define" code nil nil [58333 58466]) ("add-hook" code nil nil [58721 58763]) ("esler-escripts-directory" variable (:default-value "~/apps/emacs/escripts") nil [58764 58873]) ("esler-make-escripts-menu" function (:arguments ("ignored")) nil [58875 60521]) ("invoke-escript" function (:arguments ("name")) nil [60524 60854]) ("easy-menu-define" code nil nil [60857 60989]) ("define-key" code nil nil [61081 61202]) ("esler-kill-buffer-and-frame" function nil nil [61204 61308]) ("define-key" code nil nil [61397 61505]) ("esler-peel-off-selected-window" function nil nil [61507 61608]) ("esler-peel-off-window" function (:arguments ("window")) nil [61610 61925]) ("add-hook" code nil nil [62015 62121]) ("setq" code nil nil [62145 62171]) ("setq" code nil nil [62202 62247]) ("esler-directory-subdirectories" function (:arguments ("dir")) nil [62388 63010]) ("esler-directory-contains-elisp" function (:arguments ("dir")) nil [63012 63193]) ("esler-find-lisp-in-package" function (:arguments ("dir")) nil [63195 63528]) ("esler-set-loadpath-emacs20" function nil nil [63530 65770]) ("esler-set-loadpath-emacs21" function nil nil [65772 66405]) ("esler-set-loadpath-emacs22" function nil nil [66407 66475]) ("if" code nil nil [66477 66528]) ("if" code nil nil [66530 66581]) ("if" code nil nil [66583 66634]) ("face-describe" function (:arguments ("face")) nil [66841 67443]) ("if" code nil nil [67464 67519]) ("if" code nil nil [67545 68476]) ("if" code nil nil [68478 69427]) ("esler-standard-readonly-buffer-key-bindings-in-keymap" function (:arguments ("keymap")) nil [69497 70683]) ("esler-standard-readonly-buffer-key-bindings" function nil nil [70685 70833]) ("if" code nil nil [70875 71541]) ("jka-compr-ccrypt" include nil nil [71937 71964]) ("org-mode" function (:prototype-flag t :user-visible-flag t) nil [71989 72028]) ("org-diary" function (:prototype-flag t) nil [72029 72086]) ("org-agenda" function (:prototype-flag t :user-visible-flag t) nil [72087 72151]) ("org-store-link" function (:prototype-flag t :user-visible-flag t) nil [72152 72225]) ("add-to-list" code nil nil [72226 72280]) ("define-key" code nil nil [72281 72328]) ("define-key" code nil nil [72329 72372]) ("esler-default-eclipse-program" variable (:default-value (cond ((file-executable-p "c:/eclipse-3.0.1/eclipse.exe") "c:/eclipse-3.0.1/eclipse.exe") ((file-executable-p "c:/eclipse-3.0/eclipse.exe") "c:/eclipse-3.0/eclipse.exe") ((file-executable-p "c:/eclipse/eclipse.exe") "c:/eclipse/eclipse.exe"))) nil [72406 72710]) ("esler-start-eclipse" function (:user-visible-flag t :arguments ("heap-megabytes")) nil [72712 73231]) ("esler-start-eclipse-1gig" function nil nil [73233 73313]) ("esler-start-eclipse-debug" function nil nil [73315 74032]) ("project" include nil nil [74703 74721]) ("setq" code nil nil [74722 74768]) ("setq" code nil nil [74824 74868]) ("load-file" code nil nil [74883 74964]) ("eval-after-load" code nil nil [74993 75205]) ("setq" code nil nil [75228 75280]) ("mirror" include nil nil [75303 75320]) ("esler-check-mirror-filename" function nil nil [75452 75784]) ("add-hook" code nil nil [75786 75842]) ("esler-remote-mirror-dir" variable (:default-value (concat esler-verizon-storage-root "/cpt/")) nil [75844 75920]) ("esler-standard-mirroring" function nil nil [75921 76114]) ("if" code nil nil [76278 76322]) ("ibuffer" function (:prototype-flag t :user-visible-flag t) nil [76347 76381]) ("global-set-key" code nil nil [76382 76418]) ("esler-ibuffer-mode-bindings" function nil nil [76419 76573]) ("setq" code nil nil [76575 76912]) ("eval-after-load" code nil nil [76965 77023]) ("add-hook" code nil nil [77024 77083]) ("git-emacs" include nil nil [77110 77130]) ("setq" code nil nil [77200 77233]) ("load" code nil nil [77234 77252]) ("clearcase-dired-mode" function (:prototype-flag t :user-visible-flag t) nil [77253 77302]) ("pwv" function nil nil [77359 77499]) ("setenv" code nil nil [77501 77532]) ("setq" code nil nil [77534 77568]) ("mmm-auto" include nil nil [77707 77726]) ("setq" code nil nil [77727 77756]) ("mmm-add-mode-ext-class" code nil nil [77757 77818]) ("ishl" include nil nil [77873 77888]) ("ishl-mode" code nil nil [77889 77902]) ("ell-packages" function (:prototype-flag t :user-visible-flag t) nil [77923 77992]) ("esheet-mode" function (:prototype-flag t :user-visible-flag t) nil [78016 78087]) ("setq" code nil nil [78088 78165]) ("if" code nil nil [78190 78311]) ("power-macros" include nil nil [78963 78986]) ("setq" code nil nil [79116 79297]) ("setq" code nil nil [79334 79358]) ("setq" code nil nil [79360 79392]) ("add-hook" code nil nil [79394 79702]) ("setq" code nil nil [79766 79789]) ("setq" code nil nil [79790 79836]) ("esler-mail-setup-hook" function nil nil [79866 79921]) ("add-hook" code nil nil [79923 79973]) ("if" code nil nil [79997 80971]) ("setq" code nil nil [81061 81089]) ("setq" code nil nil [81090 81121]) ("eval-after-load" code nil nil [81510 81669]) ("eval-after-load" code nil nil [81741 81800]) ("my-vm" function nil nil [81829 81893]) ("esler-vm-junk-mail" function nil nil [81895 81993]) ("esler-vm-summary-update-hook-function" function nil nil [81995 82246]) ("vm-mark-all-messages-as-read" function (:user-visible-flag t) nil [82248 82785]) ("esler-print-folder" function (:user-visible-flag t :arguments ("folder-file")) nil [82945 84040]) ("esler-clear-mail-from-mode-line" function nil nil [84105 84708]) ("esler-vm-print-message-command" variable (:default-value "mpage -2 | lp") nil [84750 84873]) ("esler-vm-print-message" function (:user-visible-flag t :arguments ("command")) nil [84874 85547]) ("setq" code nil nil [85756 85804]) ("mail-extract-address-components" function (:prototype-flag t) nil [85806 85916]) ("esler-vm-save-return-address-as-alias" function (:user-visible-flag t) nil [85917 88462]) ("esler-vm-other-window" function (:user-visible-flag t) nil [88484 88585]) ("esler-vm-toggle-window-configuration" function (:user-visible-flag t) nil [88607 89325]) ("esler-vm-goto-last-message" function nil nil [89346 89472]) ("eslers-mail-archive-name" function nil nil [89537 89708]) ("vm" function (:prototype-flag t :user-visible-flag t) nil [89717 89772]) ("vm-other-frame" function (:prototype-flag t :user-visible-flag t) nil [89773 89847]) ("vm-visit-folder" function (:prototype-flag t :user-visible-flag t) nil [89848 89917]) ("vm-visit-virtual-folder" function (:prototype-flag t :user-visible-flag t) nil [89918 89989]) ("vm-mode" function (:prototype-flag t :user-visible-flag t) nil [89990 90048]) ("vm-mail" function (:prototype-flag t :user-visible-flag t) nil [90049 90107]) ("vm-submit-bug-report" function (:prototype-flag t :user-visible-flag t) nil [90108 90177]) ("vm-forward-message-and-complain" function (:prototype-flag t) nil [90199 90256]) ("setq" code nil nil [90257 90785]) ("vm-forward-message-and-complain" function (:prototype-flag t) nil [90837 90894]) ("setq" code nil nil [90895 91216]) ("setq" code nil nil [91217 91274]) ("setq" code nil nil [91275 91307]) ("if" code nil nil [91309 91396]) ("setq" code nil nil [91477 91514]) ("setq" code nil nil [91571 91624]) ("setq" code nil nil [91625 91678]) ("setq" code nil nil [91729 92082]) ("setq" code nil nil [92084 92458]) ("let" code nil nil [92460 93483]) ("esler-vm-get-local-mail" function (:user-visible-flag t) nil [93485 93637]) ("setq" code nil nil [93654 93732]) ("setq" code nil nil [93733 93801]) ("setq" code nil nil [93802 93848]) ("setq" code nil nil [93849 93886]) ("setq" code nil nil [93888 94192]) ("setq" code nil nil [94258 94624]) ("setq" code nil nil [94625 94907]) ("setq" code nil nil [94910 95285]) ("setq" code nil nil [95341 95446]) ("setq" code nil nil [95480 95507]) ("setq" code nil nil [95508 95536]) ("setq" code nil nil [95537 95565]) ("setq" code nil nil [95566 95592]) ("setq" code nil nil [95593 95626]) ("setq" code nil nil [95627 95648]) ("setq" code nil nil [95688 95794]) ("setq" code nil nil [95795 95830]) ("setq" code nil nil [95831 95881]) ("setq" code nil nil [95882 95915]) ("setq" code nil nil [95916 95960]) ("setq" code nil nil [95961 96007]) ("if" code nil nil [96008 96092]) ("setq" code nil nil [96093 96128]) ("setq" code nil nil [96130 96309]) ("setq" code nil nil [96311 96341]) ("setq" code nil nil [96342 96372]) ("setq" code nil nil [96373 96405]) ("setq" code nil nil [96406 96442]) ("setq" code nil nil [96443 96474]) ("setq" code nil nil [96475 96508]) ("setq" code nil nil [96509 96543]) ("setq" code nil nil [96544 96576]) ("setq" code nil nil [96577 96609]) ("if" code nil nil [96706 96908]) ("setq" code nil nil [96910 96942]) ("setq" code nil nil [97011 97042]) ("setq" code nil nil [97150 97179]) ("esler-vm-mode-bindings" function nil nil [97209 99039]) ("eval-after-load" code nil nil [99040 99088]) ("add-hook" code nil nil [99113 99158]) ("esler-vm-mode-hook" function nil nil [99159 99782]) ("esler-vm-kill-subject-and-move" function nil nil [99785 99923]) ("setq" code nil nil [100023 101166]) ("setq" code nil nil [101343 101424]) ("mailrc-mode" function nil nil [101425 101829]) ("setq" code nil nil [101831 101857]) ("setq" code nil nil [101888 102720]) ("vm-fontify" function nil nil [102722 102861]) ("setq" code nil nil [102904 103021]) ("if" code nil nil [103048 103147]) ("if" code nil nil [103149 104191]) ("setq" code nil nil [104774 104815]) ("setq" code nil nil [104922 104952]) ("setq" code nil nil [104954 105116]) ("setq" code nil nil [105143 105202]) ("setq" code nil nil [105259 105319]) ("setq" code nil nil [105321 105642]) ("setq" code nil nil [105663 105707]) ("setq" code nil nil [105708 105777]) ("setq" code nil nil [105871 105907]) ("if" code nil nil [105963 106087]) ("setq" code nil nil [106154 106207]) ("setq" code nil nil [106372 106487]) ("setq" code nil nil [106488 106554]) ("if" code nil nil [108224 108473]) ("esler-browse-url-mozilla" function (:arguments ("url" "&rest" "args")) nil [108475 108751]) ("if" code nil nil [108835 108994]) ("if" code nil nil [109027 109222]) ("global-set-key" code nil nil [109327 109376]) ("global-set-key" code nil nil [109377 109427]) ("global-set-key" code nil nil [109428 109478]) ("global-set-key" code nil nil [109479 109519]) ("global-set-key" code nil nil [109520 109568]) ("add-hook" code nil nil [109569 109684]) ("setq" code nil nil [109943 109972]) ("archie" function (:prototype-flag t :user-visible-flag t) nil [110874 110922]) ("setq" code nil nil [110924 110954]) ("setq" code nil nil [110956 110993]) ("webjump" function (:prototype-flag t :user-visible-flag t) nil [111017 111094]) ("global-set-key" code nil nil [111095 111131]) ("slashdot" function (:prototype-flag t :user-visible-flag t) nil [111157 111240]) ("watson" function (:prototype-flag t :user-visible-flag t) nil [111263 111314]) ("html-helper-mode" function (:prototype-flag t :user-visible-flag t) nil [111376 111436]) ("visual-basic-mode-hook" variable nil nil [111496 111531]) ("html-helper-mode-uses-visual-basic" variable nil nil [111532 111579]) ("esler-use-html-helper-mode-for-html" variable nil nil [113893 113941]) ("if" code nil nil [113943 114327]) ("esler-html-comment" function nil nil [114329 114745]) ("esler-html-script-narrow-to-script" function (:user-visible-flag t) nil [114747 115166]) ("esler-html-edit-javascript" function (:user-visible-flag t) nil [115168 115899]) ("esler-html-send-buffer-to-netscape4" function nil nil [115901 116233]) ("esler-html-send-buffer-to-netscape6" function nil nil [116235 116390]) ("esler-html-send-buffer-to-mozilla" function nil nil [116392 116543]) ("esler-html-send-buffer-to-ie5" function nil nil [116545 116705]) ("setq" code nil nil [116707 117112]) ("esler-comint-mode-bindings" function nil nil [117388 118031]) ("eval-after-load" code nil nil [118033 118089]) ("add-hook" code nil nil [118091 119137]) ("add-hook" code nil nil [119139 119218]) ("setq" code nil nil [119303 119570]) ("add-hook" code nil nil [119598 119648]) ("esler-shell-mode-hook" function nil nil [119649 120444]) ("telnet" function (:prototype-flag t :user-visible-flag t) nil [120473 120515]) ("add-hook" code nil nil [120516 120692]) ("setq" code nil nil [120880 120917]) ("cmubackground" function (:prototype-flag t :user-visible-flag t) nil [121273 121343]) ("run-winterp" function (:prototype-flag t :user-visible-flag t) nil [121378 121440]) ("esler-ielm-mode-bindings" function nil nil [121461 121592]) ("eval-after-load" code nil nil [121644 121696]) ("add-hook" code nil nil [121697 121764]) ("if" code nil nil [121828 121987]) ("camelCase-mode" function (:prototype-flag t :user-visible-flag t) nil [122013 122062]) ("add-hook" code nil nil [122063 122121]) ("load-library" code nil nil [122157 122182]) ("add-hook" code nil nil [122183 122221]) ("add-hook" code nil nil [122222 122262]) ("add-hook" code nil nil [122263 122310]) ("turn-on-eldoc-mode" function (:prototype-flag t :user-visible-flag t) nil [122342 122386]) ("add-hook" code nil nil [122387 122439]) ("add-hook" code nil nil [122440 122498]) ("setq" code nil nil [122528 122626]) ("smalltalk-mode" function (:prototype-flag t :user-visible-flag t) nil [122627 122663]) ("python-mode" function (:prototype-flag t :user-visible-flag t) nil [122691 122753]) ("setq" code nil nil [122754 122831]) ("imenu-example--create-python-index" function (:prototype-flag t) nil [122871 122927]) ("add-hook" code nil nil [122991 123141]) ("if" code nil nil [123230 123289]) ("esler-c-style-description" variable (:constant-flag t :default-value (quote ("cc-mode" (c-electric-pound-behavior alignleft) (c-basic-offset . 4) (c-tab-always-indent . t) (c-comment-only-line-offset . 0) (c-echo-syntactic-information-p . t) (c-hanging-comment-ender-p) (c-hanging-braces-alist (substatement-open before after) (block-open after) (block-close . c-snug-do-while) (brace-list-close before after) (class-open before after) (class-close before after) (defun-open before after) (defun-close before after) (inline-open before after) (inline-close before after)) (c-offsets-alist (statement-cont c-lineup-string-cont +) (substatement-open . 0) (arglist-close . 0) (inline-open . 0) (label . -))))) nil [123340 124799]) ("atria-c-style-description" variable (:constant-flag t :default-value (quote ("cc-mode" (c-electric-pound-behavior alignleft) (c-basic-offset . 4) (c-hanging-braces-alist (block-open\. (after)) (brace-list-open after) (class-open after) (defun-open after) (substatement-open after)) (c-offsets-alist (arglist-intro . +) (arglist-cont . 0) (arglist-close . 0) (case-label . 2) (inline-open . 0) (func-decl-cont . esler-align-mfc-end-message-map) (label . esler-align-mfc-special-labels) (statement-case-intro . 2) (substatement-open . 0))))) nil [124888 125885]) ("setq" code nil nil [126366 126402]) ("mfc-c-style-description" variable (:default-value (quote ("cc-mode" (c-electric-pound-behavior alignleft) (c-basic-offset . 4) (c-hanging-braces-alist (block-open\. (after)) (brace-list-open after) (class-open after) (defun-open after) (substatement-open after)) (c-offsets-alist (statement-cont . 0) (func-decl-cont . esler-align-mfc-end-message-map) (arglist-intro . +) (arglist-cont . 0) (arglist-cont-nonempty . +) (arglist-close . 0) (label . esler-align-mfc-special-labels) (case-label . 0) (statement-case-intro . +) (substatement-open . 0))))) nil [126404 127452]) ("esler-align-mfc-end-message-map" function (:arguments ("langelem")) nil [127454 127941]) ("esler-align-mfc-special-labels" function (:arguments ("langelem")) nil [127943 128415]) ("cc-mode" include nil nil [128424 128442]) ("c-add-style" code nil nil [128443 128490]) ("c-add-style" code nil nil [128491 128538]) ("c-add-style" code nil nil [128539 128582]) ("esler-file-seems-to-be-MFC" function nil nil [128584 128713]) ("esler-c-choose-style" function nil nil [128759 129090]) ("add-hook" code nil nil [129148 129198]) ("add-hook" code nil nil [129199 129241]) ("add-hook" code nil nil [129242 129294]) ("esler-c-mode-hook" function nil nil [129368 129601]) ("esler-c-and-c++-mode-hook" function nil nil [129603 129951]) ("esler-c-mode-bindings" function nil nil [129998 130483]) ("eval-after-load" code nil nil [130484 130536]) ("add-hook" code nil nil [130538 130594]) ("esler-c-mode-common-hook" function nil nil [130595 131190]) ("if" code nil nil [131302 131923]) ("atria-java-style-description" variable (:constant-flag t :default-value (quote ("java" (c-basic-offset . 4) (c-hanging-braces-alist (block-open\. (after)) (brace-list-open after) (class-open after) (defun-open after) (substatement-open after)) (c-offsets-alist (arglist-intro . +) (arglist-cont . 0) (arglist-close . 0) (case-label . 2) (func-decl-cont . +) (inline-open . 0) (label . 2) (statement-case-intro . 2) (substatement-open . 0) (topmost-intro-cont . 0))))) nil [132214 133152]) ("c-add-style" code nil nil [133153 133208]) ("esler-java-mode-hook" function nil nil [133210 133371]) ("add-hook" code nil nil [133373 133421]) ("kae-jde-cflow-expand-inappropriate" function nil nil [133488 133859]) ("setq" code nil nil [133947 134015]) ("atria-javascript-style-description" variable (:constant-flag t :default-value (quote ("java" (c-basic-offset . 4) (c-hanging-braces-alist (block-open\. (after)) (brace-list-open after) (class-open after) (defun-open after) (substatement-open after)) (c-offsets-alist (arglist-intro . +) (arglist-cont . 0) (arglist-close . 0) (case-label . 2) (func-decl-cont . +) (inline-open . 0) (label . 2) (lambda-intro-cont . 0) (statement-case-intro . 2) (substatement-open . 0) (topmost-intro-cont . 0))))) nil [134017 135015]) ("c-add-style" code nil nil [135016 135083]) ("esler-javascript-mode-hook" function nil nil [135085 135424]) ("add-hook" code nil nil [135426 135482]) ("c-outline" function (:prototype-flag t :user-visible-flag t) nil [135520 135559]) ("add-hook" code nil nil [135631 135801]) ("define-key" code nil nil [135803 135871]) ("define-key" code nil nil [135872 135940]) ("add-hook" code nil nil [136006 136074]) ("add-hook" code nil nil [136104 136247]) ("setq" code nil nil [136280 136357]) ("tuareg-mode" function (:prototype-flag t :user-visible-flag t) nil [136358 136428]) ("tuareg-run-caml" function (:prototype-flag t :user-visible-flag t) nil [136429 136499]) ("camldebug" function (:prototype-flag t :user-visible-flag t) nil [136500 136560]) ("setq" code nil nil [136562 136601]) ("sml-mode" function (:prototype-flag t :user-visible-flag t) nil [136626 136726]) ("sml-shell" function (:prototype-flag t :user-visible-flag t) nil [136728 136826]) ("cmusml" function (:prototype-flag t :user-visible-flag t) nil [136828 136943]) ("setq" code nil nil [136945 137014]) ("eval-after-load" code nil nil [137016 137065]) ("setq" code nil nil [137066 137087]) ("add-hook" code nil nil [137147 137191]) ("setq" code nil nil [137233 137360]) ("run-scheme" function (:prototype-flag t :user-visible-flag t) nil [137489 137563]) ("esler-scheme-mode-bindings" function nil nil [137672 137843]) ("eval-after-load" code nil nil [137844 137900]) ("add-hook" code nil nil [137902 138105]) ("setq" code nil nil [138107 138144]) ("setq" code nil nil [138292 138371]) ("run-scheme" function (:prototype-flag t :user-visible-flag t) nil [138373 138447]) ("add-hook" code nil nil [138556 138717]) ("setq" code nil nil [138719 138868]) ("run-scsh" function nil nil [138869 139102]) ("put" code nil nil [139148 139188]) ("put" code nil nil [139189 139228]) ("eval-after-load" code nil nil [139391 139512]) ("define-key" code nil nil [139543 139581]) ("define-key" code nil nil [139715 139797]) ("setq" code nil nil [139799 139825]) ("imenu-example--function-name-regexp-scheme" variable (:default-value (concat "^[ 	]*(" "\\(" "define" "\\|" "defmacro" "\\|" "\\(define-[^ 	
]\\)" "\\)" "[ 	
]*\\(\\w\\|[:><\\-]\\)+")) nil [139849 140124]) ("setq" code nil nil [140126 140372]) ("ktest" function nil nil [140373 140447]) ("imenu-example--create-scheme-index" function (:arguments ("&optional" "regexp")) nil [140449 141161]) ("add-hook" code nil nil [141163 141317]) ("add-hook" code nil nil [141546 141690]) ("add-hook" code nil nil [141692 141848]) ("setq" code nil nil [141982 142061]) ("setq" code nil nil [142062 142141]) ("setq" code nil nil [142142 142226]) ("setq" code nil nil [142227 142309]) ("if" code nil nil [142311 142754]) ("setq" code nil nil [142788 142818]) ("make-buffer-file-executable-if-script-p" function nil nil [142875 143560]) ("add-hook" code nil nil [143562 143630]) ("br-directory" variable (:default-value (concat esler-elisp-directory "/OOBR/")) nil [144010 144181]) ("oo-browser" function (:prototype-flag t :user-visible-flag t) nil [144183 144276]) ("br-env-browse" function (:prototype-flag t :user-visible-flag t) nil [144277 144393]) ("gd-add-to-mode" function (:prototype-flag t :user-visible-flag t) nil [144467 144514]) ("add-hook" code nil nil [144515 144554]) ("add-hook" code nil nil [144555 144596]) ("add-hook" code nil nil [144597 144645]) ("add-hook" code nil nil [144646 144690]) ("add-hook" code nil nil [144691 144733]) ("add-hook" code nil nil [144734 144778]) ("add-hook" code nil nil [144779 144821]) ("add-hook" code nil nil [144822 144863]) ("add-hook" code nil nil [144864 144906]) ("add-hook" code nil nil [144907 144953]) ("add-hook" code nil nil [144954 144994]) ("setq" code nil nil [144996 145020]) ("id-select-and-kill-thing" function (:prototype-flag t :user-visible-flag t) nil [145046 145134]) ("id-select-and-copy-thing" function (:prototype-flag t :user-visible-flag t) nil [145135 145224]) ("id-select-double-click-hook" function (:prototype-flag t) nil [145225 145332]) ("id-select-thing" function (:prototype-flag t :user-visible-flag t) nil [145333 145423]) ("id-select-thing-with-mouse" function (:prototype-flag t :user-visible-flag t) nil [145424 145528]) ("igrep" function (:prototype-flag t :user-visible-flag t) nil [147246 147331]) ("egrep" function (:prototype-flag t :user-visible-flag t) nil [147332 147389]) ("fgrep" function (:prototype-flag t :user-visible-flag t) nil [147390 147447]) ("igrep-recursively" function (:prototype-flag t :user-visible-flag t) nil [147448 147528]) ("egrep-recursively" function (:prototype-flag t :user-visible-flag t) nil [147529 147610]) ("fgrep-recursively" function (:prototype-flag t :user-visible-flag t) nil [147611 147692]) ("if" code nil nil [148739 149526]) ("msb" function (:prototype-flag t :user-visible-flag t) nil [149579 149630]) ("mouse-select-buffer" function (:prototype-flag t) nil [149631 149715]) ("substitute-key-definition" code nil nil [149716 149788]) ("msb" include nil nil [149790 149804]) ("setq" code nil nil [149805 149841]) ("load" code nil nil [149985 150001]) ("esler-visiting-a-Makefile-p" function nil nil [150599 151027]) ("newline-and-indent-if-not-bol" function (:user-visible-flag t) nil [151029 151238]) ("add-hook" code nil nil [151240 152803]) ("esler-mark-indented-paragraph" function nil nil [152805 152972]) ("esler-fill-indented-paragraph" function (:arguments ("justify-flag")) nil [152974 153678]) ("esler-locate-indented-paragraph" function nil nil [153680 154782]) ("eval-after-load" code nil nil [154826 154876]) ("setq" code nil nil [154995 155076]) ("setq" code nil nil [155078 155104]) ("eval-after-load" code nil nil [155144 155196]) ("setq" code nil nil [155241 155273]) ("setq" code nil nil [155274 155305]) ("setq" code nil nil [155342 155377]) ("setq" code nil nil [155426 155909]) ("esler-dired-mode-bindings" function nil nil [155911 158587]) ("eval-after-load" code nil nil [158588 158642]) ("add-hook" code nil nil [158644 158871]) ("if" code nil nil [158973 162538]) ("esler-dired-visit-vm-folder" function (:user-visible-flag t) nil [163807 163980]) ("if" code nil nil [163982 164101]) ("esler-dired-edit-linktext" function (:user-visible-flag t) nil [164102 165045]) ("esler-dired-kill-current-and-find-superior-dired" function nil nil [165047 165580]) ("esler-dired-find-alternate-buffer" function nil nil [165582 166274]) ("esler-dired-find-dired-buffer" function (:arguments ("path")) nil [166276 166852]) ("esler-dired-find-superior-buffer" function nil nil [166854 167307]) ("esler-dired-up" function (:user-visible-flag t) nil [167309 168190]) ("esler-dired-visit-tags-table" function (:user-visible-flag t) nil [168192 168422]) ("esler-dired-last-piped-command" variable nil nil [168424 168467]) ("esler-dired-pipe-file" function (:user-visible-flag t) nil [168468 169495]) ("esler-dired-spawn-shell" function (:user-visible-flag t) nil [169497 171588]) ("esler-dired-follow-link" function (:user-visible-flag t) nil [171590 171987]) ("esler-dired-down" function (:user-visible-flag t) nil [171989 172899]) ("esler-dired-keep-matching-filenames" function (:user-visible-flag t :arguments ("regexp")) nil [172901 173831]) ("esler-dired-hide-matching-filenames" function (:user-visible-flag t :arguments ("regexp")) nil [173833 174743]) ("esler-dired-revert-buffer" function (:user-visible-flag t) nil [174745 174920]) ("ps-mode" function (:prototype-flag t :user-visible-flag t) nil [174950 175028]) ("if" code nil nil [175030 175191]) ("if" code nil nil [175193 175355]) ("if" code nil nil [175357 175522]) ("ps" function nil nil [175524 175588]) ("esler-ps-mode-bindings" function nil nil [175590 176164]) ("add-hook" code nil nil [176165 176480]) ("setq" code nil nil [177028 177065]) ("display-time" code nil nil [177066 177080]) ("add-hook" code nil nil [177081 177119]) ("define-key" code nil nil [177295 177454]) ("eval-after-load" code nil nil [177510 177789]) ("info" include nil nil [178813 178828]) ("setq" code nil nil [178829 178876]) ("if" code nil nil [178878 179061]) ("if" code nil nil [179062 179247]) ("tar-mode" function (:prototype-flag t :user-visible-flag t) nil [179660 179776]) ("setq" code nil nil [179778 179847]) ("esler-tar-mode-bindings" function nil nil [179849 180555]) ("eval-after-load" code nil nil [180556 180611]) ("esler-archive-mode-bindings" function nil nil [180640 181192]) ("eval-after-load" code nil nil [181194 181253]) ("emerge-files" function (:prototype-flag t :user-visible-flag t) nil [181336 181402]) ("emerge-files-with-ancestor" function (:prototype-flag t :user-visible-flag t) nil [181403 181520]) ("emerge-buffers" function (:prototype-flag t :user-visible-flag t) nil [181521 181591]) ("emerge-buffers-with-ancestor" function (:prototype-flag t :user-visible-flag t) nil [181592 181715]) ("emerge-files-command" function (:prototype-flag t) nil [181716 181757]) ("emerge-files-with-ancestor-command" function (:prototype-flag t) nil [181758 181813]) ("emerge-files-remote" function (:prototype-flag t) nil [181814 181854]) ("emerge-files-with-ancestor-remote" function (:prototype-flag t) nil [181855 181909]) ("setq" code nil nil [181971 182032]) ("setq" code nil nil [182573 182679]) ("if" code nil nil [182751 182833]) ("esler-Man-mode-bindings" function nil nil [182895 183038]) ("add-hook" code nil nil [183040 183114]) ("esler-Man-page-mouse-3-handler" function (:user-visible-flag t :arguments ("click")) nil [183116 183648]) ("view-mode" function (:prototype-flag t :user-visible-flag t) nil [183680 183714]) ("setq" code nil nil [183715 183738]) ("esler-view-exit-action" function (:arguments ("buf")) nil [183739 183837]) ("setq" code nil nil [183838 183885]) ("setq" code nil nil [183886 183929]) ("esler-view-mode-hook" function nil nil [183930 184033]) ("load" code nil nil [184069 184105]) ("folding-mode-add-find-file-hook" code nil nil [184106 184139]) ("folding-add-to-marks-list" code nil nil [184141 184203]) ("folding-add-to-marks-list" code nil nil [184204 184260]) ("if" code nil nil [184261 184363]) ("folding-add-to-marks-list" code nil nil [184364 184427]) ("folding-add-to-marks-list" code nil nil [184428 184490]) ("folding-add-to-marks-list" code nil nil [184491 184550]) ("folding-add-to-marks-list" code nil nil [184551 184611]) ("folding-add-to-marks-list" code nil nil [184612 184671]) ("folding-add-to-marks-list" code nil nil [184672 184731]) ("folding-add-to-marks-list" code nil nil [184732 184792]) ("setq" code nil nil [184794 185020]) ("esler-folding-enfold-indented-buffer" function (:user-visible-flag t) nil [185022 187617]) ("insert-folding-cruft-at-eof" function nil nil [187619 187866]) ("eval-after-load" code nil nil [187918 187965]) ("define-key" code nil nil [187967 188056]) ("define-key" code nil nil [188057 188148]) ("add-hook" code nil nil [188150 188522]) ("esler-mouse19-folding-outline-mouse-3-handler" function (:user-visible-flag t :arguments ("click")) nil [188524 189681]) ("esler-occur-mode-bindings" function nil nil [189708 190027]) ("add-hook" code nil nil [190029 190107]) ("esler-compilation-mode-bindings" function nil nil [190261 190582]) ("add-hook" code nil nil [190583 190673]) ("context" function nil nil [190982 191091]) ("bookmark" include nil nil [191127 191146]) ("setq" code nil nil [191147 191202]) ("ehelp" include nil nil [191288 191304]) ("global-set-key" code nil nil [191305 191344]) ("lisp-dir-apropos" function (:prototype-flag t :user-visible-flag t) nil [191378 191493]) ("setq" code nil nil [191495 191610]) ("setq" code nil nil [191686 191740]) ("setq" code nil nil [191772 191807]) ("setq" code nil nil [191809 191959]) ("if" code nil nil [192000 192241]) ("time-stamp" function (:prototype-flag t :user-visible-flag t) nil [192281 192355]) ("add-hook" code nil nil [192356 192396]) ("scroll-in-place" include nil nil [192428 192454]) ("setq" code nil nil [192455 192497]) ("follow-mode" function (:prototype-flag t :user-visible-flag t) nil [192525 192620]) ("global-set-key" code nil nil [192621 192655]) ("follow-delete-other-windows-and-split" function (:prototype-flag t :user-visible-flag t) nil [192657 192790]) ("global-set-key" code nil nil [192791 192851]) ("gid" include nil nil [196472 196486]) ("easymenu" include nil nil [196663 196682]) ("bibl-visit-bibliography" function (:prototype-flag t :user-visible-flag t) nil [196684 196765]) ("bibl-mode" function (:prototype-flag t :user-visible-flag t) nil [196766 196831]) ("setq" code nil nil [196832 196881]) ("global-set-key" code nil nil [196882 196923]) ("setq" code nil nil [196951 197026]) ("paren" include nil nil [197175 197191]) ("if" code nil nil [197274 197675]) ("if" code nil nil [197739 199118]) ("if" code nil nil [199166 201181]) ("if" code nil nil [201252 201995]) ("bash-toggle-slashes" function (:user-visible-flag t) nil [202110 202878]) ("change-character-in-buffer" function (:arguments ("from" "to")) nil [202880 203044]) ("defalias" code nil nil [203046 203088]) ("/\\-buffer" function (:user-visible-flag t) nil [203090 203203]) ("/\\-region" function (:user-visible-flag t :arguments ("start" "end")) nil [203205 203354]) ("defalias" code nil nil [203356 203383]) ("\\/-buffer" function (:user-visible-flag t) nil [203385 203498]) ("\\/-region" function (:user-visible-flag t :arguments ("start" "end")) nil [203500 203650]) ("/.-region" function (:user-visible-flag t :arguments ("start" "end")) nil [203652 203799]) ("./-region" function (:user-visible-flag t :arguments ("start" "end")) nil [203801 203949]) ("defalias" code nil nil [203951 203978]) ("defalias" code nil nil [203979 204006]) ("defalias" code nil nil [204007 204032]) ("^m" function (:user-visible-flag t) nil [204034 204138]) ("defalias" code nil nil [204140 204158]) ("defalias" code nil nil [204159 204177]) ("^m-buffer" function (:user-visible-flag t) nil [204179 204290]) ("defalias" code nil nil [204292 204317]) ("defalias" code nil nil [204318 204343]) ("^m-region" function (:user-visible-flag t :arguments ("min" "max")) nil [204345 204537]) ("if" code nil nil [204539 205374]) ("if" code nil nil [205383 209326]) ("esler-project-browse-local-ccweb" function nil nil [209463 209642]) ("esler-project-dired-windows-profile" function nil nil [209644 209739]) ("esler-project-dired-unix-homedir" function nil nil [209741 209845]) ("esler-project-dired-homedir" function nil nil [209847 209916]) ("esler-current-project-notes" variable (:default-value "~/tasks/Notes.cpt") nil [209918 209974]) ("esler-edit-current-project-notes" function nil nil [209976 210077]) ("esler-edit-lore" function nil nil [210079 210154]) ("esler-edit-creds" function nil nil [210156 210233]) ("esler-project-dired-java-packages" function nil nil [210235 210330]) ("esler-project-dired-my-elisp" function nil nil [210332 210419]) ("esler-project-dired-emacs-elisp" function nil nil [210421 210524]) ("esler-project-dired-ucm-cspecs" function nil nil [210526 211031]) ("if" code nil nil [211082 211161]) ("message" code nil nil [211170 211198]))
    :file ".emacs.el"
    :pointmax 307834
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
